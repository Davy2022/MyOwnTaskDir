
Clock_Ver5.STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008220  08008220  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008228  08008228  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002f0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398b  00000000  00000000  00038341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  0003d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027eee  00000000  00000000  0003e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8ce  00000000  00000000  000663ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0bb8  00000000  00000000  00083cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00174874  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ab0  00000000  00000000  001748c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008050 	.word	0x08008050

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08008050 	.word	0x08008050

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f002 f877 	bl	80026f8 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f001 fc26 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f002 fa15 	bl	8002a54 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f001 fc16 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000008c 	.word	0x2000008c
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f003 f8a5 	bl	8003804 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <MX_GPIO_Init+0x20c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a7b      	ldr	r2, [pc, #492]	; (80008dc <MX_GPIO_Init+0x20c>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b79      	ldr	r3, [pc, #484]	; (80008dc <MX_GPIO_Init+0x20c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	4b75      	ldr	r3, [pc, #468]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a74      	ldr	r2, [pc, #464]	; (80008dc <MX_GPIO_Init+0x20c>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b72      	ldr	r3, [pc, #456]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b6e      	ldr	r3, [pc, #440]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a6d      	ldr	r2, [pc, #436]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b6b      	ldr	r3, [pc, #428]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b67      	ldr	r3, [pc, #412]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a66      	ldr	r2, [pc, #408]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b64      	ldr	r3, [pc, #400]	; (80008dc <MX_GPIO_Init+0x20c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b60      	ldr	r3, [pc, #384]	; (80008dc <MX_GPIO_Init+0x20c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a5f      	ldr	r2, [pc, #380]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b5d      	ldr	r3, [pc, #372]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b59      	ldr	r3, [pc, #356]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a58      	ldr	r2, [pc, #352]	; (80008dc <MX_GPIO_Init+0x20c>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <MX_GPIO_Init+0x20c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f244 0181 	movw	r1, #16513	; 0x4081
 8000794:	4852      	ldr	r0, [pc, #328]	; (80008e0 <MX_GPIO_Init+0x210>)
 8000796:	f003 f9f9 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4851      	ldr	r0, [pc, #324]	; (80008e4 <MX_GPIO_Init+0x214>)
 80007a0:	f003 f9f4 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484b      	ldr	r0, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x218>)
 80007bc:	f003 f822 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007c0:	2332      	movs	r3, #50	; 0x32
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4843      	ldr	r0, [pc, #268]	; (80008e8 <MX_GPIO_Init+0x218>)
 80007dc:	f003 f812 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80007e0:	2306      	movs	r3, #6
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	483c      	ldr	r0, [pc, #240]	; (80008ec <MX_GPIO_Init+0x21c>)
 80007fc:	f003 f802 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000800:	f244 0381 	movw	r3, #16513	; 0x4081
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4831      	ldr	r0, [pc, #196]	; (80008e0 <MX_GPIO_Init+0x210>)
 800081a:	f002 fff3 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000830:	230b      	movs	r3, #11
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x210>)
 800083c:	f002 ffe2 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4823      	ldr	r0, [pc, #140]	; (80008e4 <MX_GPIO_Init+0x214>)
 8000858:	f002 ffd4 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481d      	ldr	r0, [pc, #116]	; (80008e4 <MX_GPIO_Init+0x214>)
 8000870:	f002 ffc8 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000874:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000886:	230a      	movs	r3, #10
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4816      	ldr	r0, [pc, #88]	; (80008ec <MX_GPIO_Init+0x21c>)
 8000892:	f002 ffb7 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4810      	ldr	r0, [pc, #64]	; (80008ec <MX_GPIO_Init+0x21c>)
 80008ac:	f002 ffaa 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c2:	230b      	movs	r3, #11
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0x214>)
 80008ce:	f002 ff99 	bl	8003804 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3730      	adds	r7, #48	; 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40021800 	.word	0x40021800
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020000 	.word	0x40020000

080008f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_I2C1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_I2C1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_I2C1_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_I2C1_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_I2C1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_I2C1_Init+0x74>)
 800090e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_I2C1_Init+0x74>)
 800092e:	f003 f95f 	bl	8003bf0 <HAL_I2C_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000938:	f001 fa92 	bl	8001e60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C1_Init+0x74>)
 8000940:	f003 fecf 	bl	80046e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800094a:	f001 fa89 	bl	8001e60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2C1_Init+0x74>)
 8000952:	f003 ff02 	bl	800475a <HAL_I2CEx_ConfigDigitalFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800095c:	f001 fa80 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000d4 	.word	0x200000d4
 8000968:	40005400 	.word	0x40005400
 800096c:	000186a0 	.word	0x000186a0

08000970 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <HAL_I2C_MspInit+0x84>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12c      	bne.n	80009ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c0:	2304      	movs	r3, #4
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_I2C_MspInit+0x8c>)
 80009cc:	f002 ff1a 	bl	8003804 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400

08000a00 <I2CScan>:
#define BACKLIGHT 1<<3

HAL_StatusTypeDef Res;

void I2CScan()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b092      	sub	sp, #72	; 0x48
 8000a04:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i<128; i++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000a0c:	e030      	b.n	8000a70 <I2CScan+0x70>
	{
		Res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000a0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b299      	uxth	r1, r3
 8000a16:	230a      	movs	r3, #10
 8000a18:	2201      	movs	r2, #1
 8000a1a:	481d      	ldr	r0, [pc, #116]	; (8000a90 <I2CScan+0x90>)
 8000a1c:	f003 fb2a 	bl	8004074 <HAL_I2C_IsDeviceReady>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <I2CScan+0x94>)
 8000a26:	701a      	strb	r2, [r3, #0]
		if (Res == HAL_OK)
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <I2CScan+0x94>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d113      	bne.n	8000a58 <I2CScan+0x58>
		{
			char msg[64];
			snprintf(msg, sizeof(msg), "0X%02X", i);
 8000a30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000a34:	1d38      	adds	r0, r7, #4
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <I2CScan+0x98>)
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	f006 fe67 	bl	800770c <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbd5 	bl	80001f0 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	1d39      	adds	r1, r7, #4
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <I2CScan+0x9c>)
 8000a52:	f005 fdfe 	bl	8006652 <HAL_UART_Transmit>
 8000a56:	e006      	b.n	8000a66 <I2CScan+0x66>
		}
		else
			HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4910      	ldr	r1, [pc, #64]	; (8000aa0 <I2CScan+0xa0>)
 8000a60:	480e      	ldr	r0, [pc, #56]	; (8000a9c <I2CScan+0x9c>)
 8000a62:	f005 fdf6 	bl	8006652 <HAL_UART_Transmit>
	for(uint16_t i = 0; i<128; i++)
 8000a66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000a70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000a74:	2b7f      	cmp	r3, #127	; 0x7f
 8000a76:	d9ca      	bls.n	8000a0e <I2CScan+0xe>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*)".\r\n", 1, HAL_MAX_DELAY);
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4909      	ldr	r1, [pc, #36]	; (8000aa4 <I2CScan+0xa4>)
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <I2CScan+0x9c>)
 8000a82:	f005 fde6 	bl	8006652 <HAL_UART_Transmit>
}
 8000a86:	bf00      	nop
 8000a88:	3748      	adds	r7, #72	; 0x48
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000d4 	.word	0x200000d4
 8000a94:	20000128 	.word	0x20000128
 8000a98:	08008068 	.word	0x08008068
 8000a9c:	200002a4 	.word	0x200002a4
 8000aa0:	08008070 	.word	0x08008070
 8000aa4:	08008074 	.word	0x08008074

08000aa8 <LCDSendInternal>:

HAL_StatusTypeDef LCDSendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	71bb      	strb	r3, [r7, #6]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	717b      	strb	r3, [r7, #5]
	for(;;)
	{
		Res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4825      	ldr	r0, [pc, #148]	; (8000b5c <LCDSendInternal+0xb4>)
 8000ac6:	f003 fad5 	bl	8004074 <HAL_I2C_IsDeviceReady>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <LCDSendInternal+0xb8>)
 8000ad0:	701a      	strb	r2, [r3, #0]
		if(Res == HAL_OK) break;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <LCDSendInternal+0xb8>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d000      	beq.n	8000adc <LCDSendInternal+0x34>
		Res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ada:	e7ee      	b.n	8000aba <LCDSendInternal+0x12>
		if(Res == HAL_OK) break;
 8000adc:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	f023 030f 	bic.w	r3, r3, #15
 8000ae4:	73fb      	strb	r3, [r7, #15]
	uint8_t lo = (data << 4) & 0xF0;
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	011b      	lsls	r3, r3, #4
 8000aea:	73bb      	strb	r3, [r7, #14]

	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000aec:	7bfa      	ldrb	r2, [r7, #15]
 8000aee:	797b      	ldrb	r3, [r7, #5]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f043 030c 	orr.w	r3, r3, #12
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	797b      	ldrb	r3, [r7, #5]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000b0c:	7bba      	ldrb	r2, [r7, #14]
 8000b0e:	797b      	ldrb	r3, [r7, #5]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f043 030c 	orr.w	r3, r3, #12
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 8000b1c:	7bba      	ldrb	r2, [r7, #14]
 8000b1e:	797b      	ldrb	r3, [r7, #5]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	72fb      	strb	r3, [r7, #11]

	Res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	b299      	uxth	r1, r3
 8000b30:	f107 0208 	add.w	r2, r7, #8
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <LCDSendInternal+0xb4>)
 8000b3e:	f003 f99b 	bl	8003e78 <HAL_I2C_Master_Transmit>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <LCDSendInternal+0xb8>)
 8000b48:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f001 fdb0 	bl	80026b0 <HAL_Delay>
	return Res;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <LCDSendInternal+0xb8>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000d4 	.word	0x200000d4
 8000b60:	20000128 	.word	0x20000128

08000b64 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	LCDSendInternal(lcd_addr, data, PIN_RS);
 8000b74:	79b9      	ldrb	r1, [r7, #6]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff94 	bl	8000aa8 <LCDSendInternal>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]
	LCDSendInternal(lcd_addr, cmd, 0);
 8000b98:	79b9      	ldrb	r1, [r7, #6]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff82 	bl	8000aa8 <LCDSendInternal>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char * str)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8000bb8:	e009      	b.n	8000bce <LCD_SendString+0x22>
	{
		LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffce 	bl	8000b64 <LCD_SendData>
		str++;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	603b      	str	r3, [r7, #0]
	while(*str)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f1      	bne.n	8000bba <LCD_SendString+0xe>
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LCDInit>:

void LCDInit(uint8_t lcd_addr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2130      	movs	r1, #48	; 0x30
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffca 	bl	8000b88 <LCD_SendCommand>
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffc5 	bl	8000b88 <LCD_SendCommand>
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	210c      	movs	r1, #12
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffc0 	bl	8000b88 <LCD_SendCommand>
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffbb 	bl	8000b88 <LCD_SendCommand>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <LCDPrint>:

void LCDPrint(int i, char *str)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
	if (i == 0)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d108      	bne.n	8000c3c <LCDPrint+0x22>
	{
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	204e      	movs	r0, #78	; 0x4e
 8000c2e:	f7ff ffab 	bl	8000b88 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, str);
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	204e      	movs	r0, #78	; 0x4e
 8000c36:	f7ff ffb9 	bl	8000bac <LCD_SendString>
	else
	{
		LCD_SendCommand(LCD_ADDR, 0b11000000);
		LCD_SendString(LCD_ADDR, str);
	}
}
 8000c3a:	e007      	b.n	8000c4c <LCDPrint+0x32>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000c3c:	21c0      	movs	r1, #192	; 0xc0
 8000c3e:	204e      	movs	r0, #78	; 0x4e
 8000c40:	f7ff ffa2 	bl	8000b88 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, str);
 8000c44:	6839      	ldr	r1, [r7, #0]
 8000c46:	204e      	movs	r0, #78	; 0x4e
 8000c48:	f7ff ffb0 	bl	8000bac <LCD_SendString>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <init>:

void init()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	I2CScan();
 8000c58:	f7ff fed2 	bl	8000a00 <I2CScan>
	LCDInit(LCD_ADDR);
 8000c5c:	204e      	movs	r0, #78	; 0x4e
 8000c5e:	f7ff ffbf 	bl	8000be0 <LCDInit>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <flash_write1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t alFlag = 0, muFlag = 0;

HAL_StatusTypeDef flash_write1(uint32_t start, uint32_t end, TimeTypeDef * time)
{
 8000c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c6c:	b098      	sub	sp, #96	; 0x60
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6378      	str	r0, [r7, #52]	; 0x34
 8000c72:	6339      	str	r1, [r7, #48]	; 0x30
 8000c74:	62fa      	str	r2, [r7, #44]	; 0x2c
	uint32_t FirstSector,NbOfSectors,SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error= HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    //uint8_t *ptr;
    //__IO uint32_t MemoryProgramStatus;

	HAL_FLASH_Unlock();
 8000c7c:	f002 fb10 	bl	80032a0 <HAL_FLASH_Unlock>
	FirstSector = GetSector(start);//ADDR_FLASH_SECTOR_3;
 8000c80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c82:	f000 f8a9 	bl	8000dd8 <GetSector>
 8000c86:	65b8      	str	r0, [r7, #88]	; 0x58
	NbOfSectors = GetSector(end) - FirstSector + 1;
 8000c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c8a:	f000 f8a5 	bl	8000dd8 <GetSector>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	657b      	str	r3, [r7, #84]	; 0x54

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	EraseInitStruct.Sector        = FirstSector;
 8000ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
	EraseInitStruct.NbSectors     = NbOfSectors;
 8000ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ca6:	64bb      	str	r3, [r7, #72]	; 0x48

	error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8000ca8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 fc66 	bl	8003584 <HAL_FLASHEx_Erase>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(error != HAL_OK) return error;
 8000cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <flash_write1+0x64>
 8000cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cca:	e07c      	b.n	8000dc6 <flash_write1+0x15e>
	//	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+4, time->hours);
	//	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+8, time->minutes);
	//	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+12, time->seconds);
	//}

	else if (current_state.mode == ALARM_TIME_SETTING)
 8000ccc:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <flash_write1+0x168>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d13c      	bne.n	8000d4e <flash_write1+0xe6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, start+16, time->ampm);
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd6:	f103 0110 	add.w	r1, r3, #16
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	17da      	asrs	r2, r3, #31
 8000ce4:	623b      	str	r3, [r7, #32]
 8000ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8000ce8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cec:	2000      	movs	r0, #0
 8000cee:	f002 fa83 	bl	80031f8 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+20, time->hours);
 8000cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf4:	f103 0114 	add.w	r1, r3, #20
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	17da      	asrs	r2, r3, #31
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	61fa      	str	r2, [r7, #28]
 8000d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f002 fa74 	bl	80031f8 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+24, time->minutes);
 8000d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d12:	f103 0118 	add.w	r1, r3, #24
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	17da      	asrs	r2, r3, #31
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	617a      	str	r2, [r7, #20]
 8000d24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f002 fa65 	bl	80031f8 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+28, time->seconds);
 8000d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d30:	f103 011c 	add.w	r1, r3, #28
 8000d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d36:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	17da      	asrs	r2, r3, #31
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	60fa      	str	r2, [r7, #12]
 8000d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d46:	2002      	movs	r0, #2
 8000d48:	f002 fa56 	bl	80031f8 <HAL_FLASH_Program>
 8000d4c:	e038      	b.n	8000dc0 <flash_write1+0x158>
	{
		//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start, time->ampm);
		//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+4, time->hours);
		//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+8, time->minutes);
		//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+12, time->seconds);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start, default_nvitem.setting_time.ampm);
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <flash_write1+0x16c>)
 8000d50:	f993 3000 	ldrsb.w	r3, [r3]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	17da      	asrs	r2, r3, #31
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d62:	2002      	movs	r0, #2
 8000d64:	f002 fa48 	bl	80031f8 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+4, default_nvitem.setting_time.hours);
 8000d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6a:	1d19      	adds	r1, r3, #4
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <flash_write1+0x16c>)
 8000d6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	17da      	asrs	r2, r3, #31
 8000d76:	469a      	mov	sl, r3
 8000d78:	4693      	mov	fp, r2
 8000d7a:	4652      	mov	r2, sl
 8000d7c:	465b      	mov	r3, fp
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f002 fa3a 	bl	80031f8 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+8, default_nvitem.setting_time.minutes);
 8000d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d86:	f103 0108 	add.w	r1, r3, #8
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <flash_write1+0x16c>)
 8000d8c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	17da      	asrs	r2, r3, #31
 8000d94:	4698      	mov	r8, r3
 8000d96:	4691      	mov	r9, r2
 8000d98:	4642      	mov	r2, r8
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f002 fa2b 	bl	80031f8 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start+12, default_nvitem.setting_time.seconds);
 8000da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da4:	f103 010c 	add.w	r1, r3, #12
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <flash_write1+0x16c>)
 8000daa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	17da      	asrs	r2, r3, #31
 8000db2:	461c      	mov	r4, r3
 8000db4:	4615      	mov	r5, r2
 8000db6:	4622      	mov	r2, r4
 8000db8:	462b      	mov	r3, r5
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f002 fa1c 	bl	80031f8 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8000dc0:	f002 fa90 	bl	80032e4 <HAL_FLASH_Lock>

	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3760      	adds	r7, #96	; 0x60
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000dd0:	2000012c 	.word	0x2000012c
 8000dd4:	20000154 	.word	0x20000154

08000dd8 <GetSector>:

	return 0;
}

static uint32_t GetSector(uint32_t Address)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a82      	ldr	r2, [pc, #520]	; (8000ff0 <GetSector+0x218>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d206      	bcs.n	8000dfa <GetSector+0x22>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000df2:	d302      	bcc.n	8000dfa <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e0f3      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a7d      	ldr	r2, [pc, #500]	; (8000ff4 <GetSector+0x21c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d206      	bcs.n	8000e10 <GetSector+0x38>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a7a      	ldr	r2, [pc, #488]	; (8000ff0 <GetSector+0x218>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d302      	bcc.n	8000e10 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	e0e8      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a79      	ldr	r2, [pc, #484]	; (8000ff8 <GetSector+0x220>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d206      	bcs.n	8000e26 <GetSector+0x4e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a76      	ldr	r2, [pc, #472]	; (8000ff4 <GetSector+0x21c>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d302      	bcc.n	8000e26 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e0dd      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a74      	ldr	r2, [pc, #464]	; (8000ffc <GetSector+0x224>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d806      	bhi.n	8000e3c <GetSector+0x64>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a71      	ldr	r2, [pc, #452]	; (8000ff8 <GetSector+0x220>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d302      	bcc.n	8000e3c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e0d2      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a70      	ldr	r2, [pc, #448]	; (8001000 <GetSector+0x228>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d806      	bhi.n	8000e52 <GetSector+0x7a>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a6d      	ldr	r2, [pc, #436]	; (8000ffc <GetSector+0x224>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d902      	bls.n	8000e52 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e0c7      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a6b      	ldr	r2, [pc, #428]	; (8001004 <GetSector+0x22c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d806      	bhi.n	8000e68 <GetSector+0x90>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a68      	ldr	r2, [pc, #416]	; (8001000 <GetSector+0x228>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d902      	bls.n	8000e68 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000e62:	2305      	movs	r3, #5
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e0bc      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a67      	ldr	r2, [pc, #412]	; (8001008 <GetSector+0x230>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d806      	bhi.n	8000e7e <GetSector+0xa6>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a64      	ldr	r2, [pc, #400]	; (8001004 <GetSector+0x22c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d902      	bls.n	8000e7e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e0b1      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a62      	ldr	r2, [pc, #392]	; (800100c <GetSector+0x234>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d806      	bhi.n	8000e94 <GetSector+0xbc>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a5f      	ldr	r2, [pc, #380]	; (8001008 <GetSector+0x230>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d902      	bls.n	8000e94 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e0a6      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <GetSector+0x238>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d806      	bhi.n	8000eaa <GetSector+0xd2>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a5b      	ldr	r2, [pc, #364]	; (800100c <GetSector+0x234>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d902      	bls.n	8000eaa <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e09b      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a59      	ldr	r2, [pc, #356]	; (8001014 <GetSector+0x23c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d806      	bhi.n	8000ec0 <GetSector+0xe8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a56      	ldr	r2, [pc, #344]	; (8001010 <GetSector+0x238>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d902      	bls.n	8000ec0 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8000eba:	2309      	movs	r3, #9
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e090      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a55      	ldr	r2, [pc, #340]	; (8001018 <GetSector+0x240>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d806      	bhi.n	8000ed6 <GetSector+0xfe>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a52      	ldr	r2, [pc, #328]	; (8001014 <GetSector+0x23c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d902      	bls.n	8000ed6 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e085      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000edc:	d206      	bcs.n	8000eec <GetSector+0x114>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4d      	ldr	r2, [pc, #308]	; (8001018 <GetSector+0x240>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d902      	bls.n	8000eec <GetSector+0x114>
  {
    sector = FLASH_SECTOR_11;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e07a      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4b      	ldr	r2, [pc, #300]	; (800101c <GetSector+0x244>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d206      	bcs.n	8000f02 <GetSector+0x12a>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000efa:	d302      	bcc.n	8000f02 <GetSector+0x12a>
  {
    sector = FLASH_SECTOR_12;
 8000efc:	230c      	movs	r3, #12
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e06f      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a46      	ldr	r2, [pc, #280]	; (8001020 <GetSector+0x248>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d206      	bcs.n	8000f18 <GetSector+0x140>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a43      	ldr	r2, [pc, #268]	; (800101c <GetSector+0x244>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d302      	bcc.n	8000f18 <GetSector+0x140>
  {
    sector = FLASH_SECTOR_13;
 8000f12:	230d      	movs	r3, #13
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e064      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a42      	ldr	r2, [pc, #264]	; (8001024 <GetSector+0x24c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d206      	bcs.n	8000f2e <GetSector+0x156>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a3f      	ldr	r2, [pc, #252]	; (8001020 <GetSector+0x248>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d302      	bcc.n	8000f2e <GetSector+0x156>
  {
    sector = FLASH_SECTOR_14;
 8000f28:	230e      	movs	r3, #14
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e059      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <GetSector+0x250>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d806      	bhi.n	8000f44 <GetSector+0x16c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <GetSector+0x24c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d302      	bcc.n	8000f44 <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_15;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e04e      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a39      	ldr	r2, [pc, #228]	; (800102c <GetSector+0x254>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d806      	bhi.n	8000f5a <GetSector+0x182>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a36      	ldr	r2, [pc, #216]	; (8001028 <GetSector+0x250>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d902      	bls.n	8000f5a <GetSector+0x182>
  {
    sector = FLASH_SECTOR_16;
 8000f54:	2310      	movs	r3, #16
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e043      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a34      	ldr	r2, [pc, #208]	; (8001030 <GetSector+0x258>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d806      	bhi.n	8000f70 <GetSector+0x198>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a31      	ldr	r2, [pc, #196]	; (800102c <GetSector+0x254>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d902      	bls.n	8000f70 <GetSector+0x198>
  {
    sector = FLASH_SECTOR_17;
 8000f6a:	2311      	movs	r3, #17
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e038      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a30      	ldr	r2, [pc, #192]	; (8001034 <GetSector+0x25c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d806      	bhi.n	8000f86 <GetSector+0x1ae>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a2d      	ldr	r2, [pc, #180]	; (8001030 <GetSector+0x258>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d902      	bls.n	8000f86 <GetSector+0x1ae>
  {
    sector = FLASH_SECTOR_18;
 8000f80:	2312      	movs	r3, #18
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e02d      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a2b      	ldr	r2, [pc, #172]	; (8001038 <GetSector+0x260>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d806      	bhi.n	8000f9c <GetSector+0x1c4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a28      	ldr	r2, [pc, #160]	; (8001034 <GetSector+0x25c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d902      	bls.n	8000f9c <GetSector+0x1c4>
  {
    sector = FLASH_SECTOR_19;
 8000f96:	2313      	movs	r3, #19
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e022      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a27      	ldr	r2, [pc, #156]	; (800103c <GetSector+0x264>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d806      	bhi.n	8000fb2 <GetSector+0x1da>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a24      	ldr	r2, [pc, #144]	; (8001038 <GetSector+0x260>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d902      	bls.n	8000fb2 <GetSector+0x1da>
  {
    sector = FLASH_SECTOR_20;
 8000fac:	2314      	movs	r3, #20
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e017      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <GetSector+0x268>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d806      	bhi.n	8000fc8 <GetSector+0x1f0>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	; (800103c <GetSector+0x264>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d902      	bls.n	8000fc8 <GetSector+0x1f0>
  {
    sector = FLASH_SECTOR_21;
 8000fc2:	2315      	movs	r3, #21
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e00c      	b.n	8000fe2 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <GetSector+0x26c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d806      	bhi.n	8000fde <GetSector+0x206>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <GetSector+0x268>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d902      	bls.n	8000fde <GetSector+0x206>
  {
    sector = FLASH_SECTOR_22;
 8000fd8:	2316      	movs	r3, #22
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e001      	b.n	8000fe2 <GetSector+0x20a>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
  {
    sector = FLASH_SECTOR_23;
 8000fde:	2317      	movs	r3, #23
 8000fe0:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	08004000 	.word	0x08004000
 8000ff4:	08008000 	.word	0x08008000
 8000ff8:	0800c000 	.word	0x0800c000
 8000ffc:	0800ffff 	.word	0x0800ffff
 8001000:	0801ffff 	.word	0x0801ffff
 8001004:	0803ffff 	.word	0x0803ffff
 8001008:	0805ffff 	.word	0x0805ffff
 800100c:	0807ffff 	.word	0x0807ffff
 8001010:	0809ffff 	.word	0x0809ffff
 8001014:	080bffff 	.word	0x080bffff
 8001018:	080dffff 	.word	0x080dffff
 800101c:	08104000 	.word	0x08104000
 8001020:	08108000 	.word	0x08108000
 8001024:	0810c000 	.word	0x0810c000
 8001028:	0810ffff 	.word	0x0810ffff
 800102c:	0811ffff 	.word	0x0811ffff
 8001030:	0813ffff 	.word	0x0813ffff
 8001034:	0815ffff 	.word	0x0815ffff
 8001038:	0817ffff 	.word	0x0817ffff
 800103c:	0819ffff 	.word	0x0819ffff
 8001040:	081bffff 	.word	0x081bffff
 8001044:	081dffff 	.word	0x081dffff

08001048 <clock_set>:
uint8_t btn_value;
volatile static uint8_t pos;
char uart_buf[30];

void clock_set(TimeTypeDef * time)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if(time->seconds>=60)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001056:	2b3b      	cmp	r3, #59	; 0x3b
 8001058:	dd0c      	ble.n	8001074 <clock_set+0x2c>
	{
		time->minutes++;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	3301      	adds	r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	b25a      	sxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	709a      	strb	r2, [r3, #2]
		time->seconds = 0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	70da      	strb	r2, [r3, #3]
	{
		time->hours = 1;
		if (time->ampm == 0) time->ampm++;
		else if (time->ampm == 1) time->ampm--;
	}
}
 8001072:	e036      	b.n	80010e2 <clock_set+0x9a>
	else if(time->minutes>=60)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800107a:	2b3b      	cmp	r3, #59	; 0x3b
 800107c:	dd0c      	ble.n	8001098 <clock_set+0x50>
		time->hours++;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b25a      	sxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	705a      	strb	r2, [r3, #1]
		time->minutes = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	709a      	strb	r2, [r3, #2]
}
 8001096:	e024      	b.n	80010e2 <clock_set+0x9a>
	else if(time->hours==13)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800109e:	2b0d      	cmp	r3, #13
 80010a0:	d11f      	bne.n	80010e2 <clock_set+0x9a>
		time->hours = 1;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	705a      	strb	r2, [r3, #1]
		if (time->ampm == 0) time->ampm++;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f993 3000 	ldrsb.w	r3, [r3]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <clock_set+0x7e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	701a      	strb	r2, [r3, #0]
}
 80010c4:	e00d      	b.n	80010e2 <clock_set+0x9a>
		else if (time->ampm == 1) time->ampm--;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f993 3000 	ldrsb.w	r3, [r3]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d108      	bne.n	80010e2 <clock_set+0x9a>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f993 3000 	ldrsb.w	r3, [r3]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	3b01      	subs	r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <blink>:

void blink(TimeTypeDef * time, char str[18])
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	static int blink_flag;
	static volatile int blink_count;
	uint8_t ampm = time->ampm;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001100:	73fb      	strb	r3, [r7, #15]
	uint8_t hours = time->hours;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001108:	73bb      	strb	r3, [r7, #14]
	uint8_t minutes = time->minutes;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001110:	737b      	strb	r3, [r7, #13]
	uint8_t seconds = time->seconds;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001118:	733b      	strb	r3, [r7, #12]

	if (timer_count - blink_count > 50)
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <blink+0x198>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <blink+0x19c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b32      	cmp	r3, #50	; 0x32
 8001126:	dd16      	ble.n	8001156 <blink+0x66>
	{
		if (blink_flag == 0) blink_flag++;
 8001128:	4b59      	ldr	r3, [pc, #356]	; (8001290 <blink+0x1a0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d105      	bne.n	800113c <blink+0x4c>
 8001130:	4b57      	ldr	r3, [pc, #348]	; (8001290 <blink+0x1a0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a56      	ldr	r2, [pc, #344]	; (8001290 <blink+0x1a0>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e008      	b.n	800114e <blink+0x5e>
		else if (blink_flag == 1) blink_flag--;
 800113c:	4b54      	ldr	r3, [pc, #336]	; (8001290 <blink+0x1a0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d104      	bne.n	800114e <blink+0x5e>
 8001144:	4b52      	ldr	r3, [pc, #328]	; (8001290 <blink+0x1a0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a51      	ldr	r2, [pc, #324]	; (8001290 <blink+0x1a0>)
 800114c:	6013      	str	r3, [r2, #0]
		blink_count = timer_count;
 800114e:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <blink+0x198>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a4e      	ldr	r2, [pc, #312]	; (800128c <blink+0x19c>)
 8001154:	6013      	str	r3, [r2, #0]
	}

	if (blink_flag == 0)
 8001156:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <blink+0x1a0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d119      	bne.n	8001192 <blink+0xa2>
	{
		if (ampm == 0) sprintf(str,"AM %02d:%02d:%02d", hours,minutes,seconds);
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d109      	bne.n	8001178 <blink+0x88>
 8001164:	7bba      	ldrb	r2, [r7, #14]
 8001166:	7b79      	ldrb	r1, [r7, #13]
 8001168:	7b3b      	ldrb	r3, [r7, #12]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	460b      	mov	r3, r1
 800116e:	4949      	ldr	r1, [pc, #292]	; (8001294 <blink+0x1a4>)
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f006 faff 	bl	8007774 <siprintf>
 8001176:	e069      	b.n	800124c <blink+0x15c>
		else if (ampm == 1) sprintf(str,"PM %02d:%02d:%02d", hours,minutes,seconds);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d166      	bne.n	800124c <blink+0x15c>
 800117e:	7bba      	ldrb	r2, [r7, #14]
 8001180:	7b79      	ldrb	r1, [r7, #13]
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	460b      	mov	r3, r1
 8001188:	4943      	ldr	r1, [pc, #268]	; (8001298 <blink+0x1a8>)
 800118a:	6838      	ldr	r0, [r7, #0]
 800118c:	f006 faf2 	bl	8007774 <siprintf>
 8001190:	e05c      	b.n	800124c <blink+0x15c>
	}

	else if (blink_flag == 1)
 8001192:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <blink+0x1a0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d158      	bne.n	800124c <blink+0x15c>
	{
		if (pos == 0) sprintf(str,"__ %02d:%02d:%02d", hours,minutes,seconds);
 800119a:	4b40      	ldr	r3, [pc, #256]	; (800129c <blink+0x1ac>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d109      	bne.n	80011b8 <blink+0xc8>
 80011a4:	7bba      	ldrb	r2, [r7, #14]
 80011a6:	7b79      	ldrb	r1, [r7, #13]
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	493c      	ldr	r1, [pc, #240]	; (80012a0 <blink+0x1b0>)
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f006 fadf 	bl	8007774 <siprintf>
 80011b6:	e049      	b.n	800124c <blink+0x15c>
		else if (pos == 1)
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <blink+0x1ac>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d113      	bne.n	80011ea <blink+0xfa>
		{
			if (ampm == 0) sprintf(str,"AM __:%02d:%02d", minutes,seconds);
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <blink+0xe6>
 80011c8:	7b7a      	ldrb	r2, [r7, #13]
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	4935      	ldr	r1, [pc, #212]	; (80012a4 <blink+0x1b4>)
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f006 fad0 	bl	8007774 <siprintf>
 80011d4:	e03a      	b.n	800124c <blink+0x15c>
			else if (ampm == 1) sprintf(str,"PM __:%02d:%02d", minutes,seconds);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d137      	bne.n	800124c <blink+0x15c>
 80011dc:	7b7a      	ldrb	r2, [r7, #13]
 80011de:	7b3b      	ldrb	r3, [r7, #12]
 80011e0:	4931      	ldr	r1, [pc, #196]	; (80012a8 <blink+0x1b8>)
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f006 fac6 	bl	8007774 <siprintf>
 80011e8:	e030      	b.n	800124c <blink+0x15c>
		}
		else if (pos == 2)
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <blink+0x1ac>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d113      	bne.n	800121c <blink+0x12c>
		{
			if (ampm == 0) sprintf(str,"AM %02d:__:%02d", hours,seconds);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <blink+0x118>
 80011fa:	7bba      	ldrb	r2, [r7, #14]
 80011fc:	7b3b      	ldrb	r3, [r7, #12]
 80011fe:	492b      	ldr	r1, [pc, #172]	; (80012ac <blink+0x1bc>)
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f006 fab7 	bl	8007774 <siprintf>
 8001206:	e021      	b.n	800124c <blink+0x15c>
			else if (ampm == 0) sprintf(str,"PM %02d:__:%02d", hours,seconds);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d11e      	bne.n	800124c <blink+0x15c>
 800120e:	7bba      	ldrb	r2, [r7, #14]
 8001210:	7b3b      	ldrb	r3, [r7, #12]
 8001212:	4927      	ldr	r1, [pc, #156]	; (80012b0 <blink+0x1c0>)
 8001214:	6838      	ldr	r0, [r7, #0]
 8001216:	f006 faad 	bl	8007774 <siprintf>
 800121a:	e017      	b.n	800124c <blink+0x15c>
		}
		else if (pos == 3)
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <blink+0x1ac>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b03      	cmp	r3, #3
 8001224:	d112      	bne.n	800124c <blink+0x15c>
		{
			if (ampm == 0) sprintf(str,"AM %02d:%02d:__", hours,minutes);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d106      	bne.n	800123a <blink+0x14a>
 800122c:	7bba      	ldrb	r2, [r7, #14]
 800122e:	7b7b      	ldrb	r3, [r7, #13]
 8001230:	4920      	ldr	r1, [pc, #128]	; (80012b4 <blink+0x1c4>)
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f006 fa9e 	bl	8007774 <siprintf>
 8001238:	e008      	b.n	800124c <blink+0x15c>
			else if (ampm == 0) sprintf(str,"PM %02d:%02d:__", hours,minutes);
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d105      	bne.n	800124c <blink+0x15c>
 8001240:	7bba      	ldrb	r2, [r7, #14]
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	491c      	ldr	r1, [pc, #112]	; (80012b8 <blink+0x1c8>)
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f006 fa94 	bl	8007774 <siprintf>
		}
	}

	if (current_state.mode == ALARM_TIME_SETTING)
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <blink+0x1cc>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d10a      	bne.n	800126a <blink+0x17a>
		strcat(str," AL");
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f7fe ffcb 	bl	80001f0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <blink+0x1d0>)
 8001264:	6810      	ldr	r0, [r2, #0]
 8001266:	6018      	str	r0, [r3, #0]
	else strcat(str,"   ");
}
 8001268:	e009      	b.n	800127e <blink+0x18e>
	else strcat(str,"   ");
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	f7fe ffc0 	bl	80001f0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <blink+0x1d4>)
 800127a:	6810      	ldr	r0, [r2, #0]
 800127c:	6018      	str	r0, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000160 	.word	0x20000160
 800128c:	200001a0 	.word	0x200001a0
 8001290:	200001a4 	.word	0x200001a4
 8001294:	08008078 	.word	0x08008078
 8001298:	0800808c 	.word	0x0800808c
 800129c:	20000191 	.word	0x20000191
 80012a0:	080080a0 	.word	0x080080a0
 80012a4:	080080b4 	.word	0x080080b4
 80012a8:	080080c4 	.word	0x080080c4
 80012ac:	080080d4 	.word	0x080080d4
 80012b0:	080080e4 	.word	0x080080e4
 80012b4:	080080f4 	.word	0x080080f4
 80012b8:	08008104 	.word	0x08008104
 80012bc:	2000012c 	.word	0x2000012c
 80012c0:	08008114 	.word	0x08008114
 80012c4:	08008118 	.word	0x08008118

080012c8 <time_set>:

void time_set(TimeTypeDef * time, char str[18])
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	if(pos == 0)
 80012d2:	4ba4      	ldr	r3, [pc, #656]	; (8001564 <time_set+0x29c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d151      	bne.n	8001380 <time_set+0xb8>
	{
		switch(current_state.button)
 80012dc:	4ba2      	ldr	r3, [pc, #648]	; (8001568 <time_set+0x2a0>)
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d007      	beq.n	80012f4 <time_set+0x2c>
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	f300 8177 	bgt.w	80015d8 <time_set+0x310>
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d00a      	beq.n	8001304 <time_set+0x3c>
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d027      	beq.n	8001342 <time_set+0x7a>
				time->ampm++;
			else if (time->ampm == 1)
				time->ampm--;
			break;
		default:
			break;
 80012f2:	e171      	b.n	80015d8 <time_set+0x310>
			pos++;
 80012f4:	4b9b      	ldr	r3, [pc, #620]	; (8001564 <time_set+0x29c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b99      	ldr	r3, [pc, #612]	; (8001564 <time_set+0x29c>)
 8001300:	701a      	strb	r2, [r3, #0]
			break;
 8001302:	e182      	b.n	800160a <time_set+0x342>
			if(time->ampm == 0)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f993 3000 	ldrsb.w	r3, [r3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <time_set+0x5a>
				time->ampm++;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f993 3000 	ldrsb.w	r3, [r3]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	b25a      	sxtb	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	701a      	strb	r2, [r3, #0]
			break;
 8001320:	e15c      	b.n	80015dc <time_set+0x314>
			else if (time->ampm == 1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f993 3000 	ldrsb.w	r3, [r3]
 8001328:	2b01      	cmp	r3, #1
 800132a:	f040 8157 	bne.w	80015dc <time_set+0x314>
				time->ampm--;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f993 3000 	ldrsb.w	r3, [r3]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3b01      	subs	r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	b25a      	sxtb	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	701a      	strb	r2, [r3, #0]
			break;
 8001340:	e14c      	b.n	80015dc <time_set+0x314>
			if(time->ampm == 0)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f993 3000 	ldrsb.w	r3, [r3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d109      	bne.n	8001360 <time_set+0x98>
				time->ampm++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f993 3000 	ldrsb.w	r3, [r3]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b25a      	sxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	701a      	strb	r2, [r3, #0]
			break;
 800135e:	e13f      	b.n	80015e0 <time_set+0x318>
			else if (time->ampm == 1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f993 3000 	ldrsb.w	r3, [r3]
 8001366:	2b01      	cmp	r3, #1
 8001368:	f040 813a 	bne.w	80015e0 <time_set+0x318>
				time->ampm--;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f993 3000 	ldrsb.w	r3, [r3]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	3b01      	subs	r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	b25a      	sxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	701a      	strb	r2, [r3, #0]
			break;
 800137e:	e12f      	b.n	80015e0 <time_set+0x318>
		}
	}

	else if (pos == 1)
 8001380:	4b78      	ldr	r3, [pc, #480]	; (8001564 <time_set+0x29c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d146      	bne.n	8001418 <time_set+0x150>
	{
		switch(current_state.button)
 800138a:	4b77      	ldr	r3, [pc, #476]	; (8001568 <time_set+0x2a0>)
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	3b01      	subs	r3, #1
 8001390:	2b03      	cmp	r3, #3
 8001392:	f200 8127 	bhi.w	80015e4 <time_set+0x31c>
 8001396:	a201      	add	r2, pc, #4	; (adr r2, 800139c <time_set+0xd4>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	080013cd 	.word	0x080013cd
 80013a0:	080013f3 	.word	0x080013f3
 80013a4:	080013ad 	.word	0x080013ad
 80013a8:	080013bd 	.word	0x080013bd
		{
		case RIGHT:
			pos++;
 80013ac:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <time_set+0x29c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <time_set+0x29c>)
 80013b8:	701a      	strb	r2, [r3, #0]
			break;
 80013ba:	e126      	b.n	800160a <time_set+0x342>
		case LEFT:
			pos--;
 80013bc:	4b69      	ldr	r3, [pc, #420]	; (8001564 <time_set+0x29c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b67      	ldr	r3, [pc, #412]	; (8001564 <time_set+0x29c>)
 80013c8:	701a      	strb	r2, [r3, #0]
			break;
 80013ca:	e11e      	b.n	800160a <time_set+0x342>
		case UP:
			time->hours++;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	705a      	strb	r2, [r3, #1]
			if(time->hours>12)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	f340 80ff 	ble.w	80015e8 <time_set+0x320>
				time->hours = 1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	705a      	strb	r2, [r3, #1]
			break;
 80013f0:	e0fa      	b.n	80015e8 <time_set+0x320>
		case DOWN:
			time->hours--;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	705a      	strb	r2, [r3, #1]
			if(time->hours<0)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f280 80ee 	bge.w	80015ec <time_set+0x324>
				time->hours = 12;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	220c      	movs	r2, #12
 8001414:	705a      	strb	r2, [r3, #1]
			break;
 8001416:	e0e9      	b.n	80015ec <time_set+0x324>
		default:
			break;
		}
	}

	else if (pos == 2)
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <time_set+0x29c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d146      	bne.n	80014b0 <time_set+0x1e8>
	{
		switch(current_state.button)
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <time_set+0x2a0>)
 8001424:	785b      	ldrb	r3, [r3, #1]
 8001426:	3b01      	subs	r3, #1
 8001428:	2b03      	cmp	r3, #3
 800142a:	f200 80e1 	bhi.w	80015f0 <time_set+0x328>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <time_set+0x16c>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	08001465 	.word	0x08001465
 8001438:	0800148b 	.word	0x0800148b
 800143c:	08001445 	.word	0x08001445
 8001440:	08001455 	.word	0x08001455
		{
		case RIGHT:
			pos++;
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <time_set+0x29c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <time_set+0x29c>)
 8001450:	701a      	strb	r2, [r3, #0]
			break;
 8001452:	e0da      	b.n	800160a <time_set+0x342>
		case LEFT:
			pos--;
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <time_set+0x29c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3b01      	subs	r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <time_set+0x29c>)
 8001460:	701a      	strb	r2, [r3, #0]
			break;
 8001462:	e0d2      	b.n	800160a <time_set+0x342>
		case UP:
			time->minutes++;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	3301      	adds	r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	b25a      	sxtb	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	709a      	strb	r2, [r3, #2]
			if(time->minutes>=60)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800147c:	2b3b      	cmp	r3, #59	; 0x3b
 800147e:	f340 80b9 	ble.w	80015f4 <time_set+0x32c>
				time->minutes = 0;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	709a      	strb	r2, [r3, #2]
			break;
 8001488:	e0b4      	b.n	80015f4 <time_set+0x32c>
		case DOWN:
			time->minutes--;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	3b01      	subs	r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b25a      	sxtb	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	709a      	strb	r2, [r3, #2]
			if(time->minutes<0)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f280 80a8 	bge.w	80015f8 <time_set+0x330>
				time->minutes = 59;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	223b      	movs	r2, #59	; 0x3b
 80014ac:	709a      	strb	r2, [r3, #2]
			break;
 80014ae:	e0a3      	b.n	80015f8 <time_set+0x330>
		default:
			break;
		}
	}

	else if(pos == 3)
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <time_set+0x29c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	f040 80a0 	bne.w	80015fc <time_set+0x334>
	{
		switch(current_state.button)
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <time_set+0x2a0>)
 80014be:	785b      	ldrb	r3, [r3, #1]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	f200 809c 	bhi.w	8001600 <time_set+0x338>
 80014c8:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <time_set+0x208>)
 80014ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ce:	bf00      	nop
 80014d0:	08001591 	.word	0x08001591
 80014d4:	080015b5 	.word	0x080015b5
 80014d8:	080014e1 	.word	0x080014e1
 80014dc:	08001581 	.word	0x08001581
		{
		case RIGHT:
			pos = 0;
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <time_set+0x29c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]

			if (current_state.mode == TIME_SETTING)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <time_set+0x2a0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d119      	bne.n	8001522 <time_set+0x25a>
			{
				default_nvitem.setting_time.ampm = time->ampm;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f993 2000 	ldrsb.w	r2, [r3]
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <time_set+0x2a4>)
 80014f6:	701a      	strb	r2, [r3, #0]
				default_nvitem.setting_time.hours = time->hours;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <time_set+0x2a4>)
 8001500:	705a      	strb	r2, [r3, #1]
				default_nvitem.setting_time.minutes = time->minutes;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <time_set+0x2a4>)
 800150a:	709a      	strb	r2, [r3, #2]
				default_nvitem.setting_time.seconds = time->seconds;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <time_set+0x2a4>)
 8001514:	70da      	strb	r2, [r3, #3]
				flash_write1(ADDR_FLASH_SECTOR_13, ADDR_FLASH_SECTOR_14, time);
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4915      	ldr	r1, [pc, #84]	; (8001570 <time_set+0x2a8>)
 800151a:	4816      	ldr	r0, [pc, #88]	; (8001574 <time_set+0x2ac>)
 800151c:	f7ff fba4 	bl	8000c68 <flash_write1>
 8001520:	e01c      	b.n	800155c <time_set+0x294>
			}
			else if(current_state.mode == ALARM_TIME_SETTING)
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <time_set+0x2a0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d118      	bne.n	800155c <time_set+0x294>
			{
				default_nvitem.alarm_time.ampm = time->ampm;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f993 2000 	ldrsb.w	r2, [r3]
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <time_set+0x2a4>)
 8001532:	711a      	strb	r2, [r3, #4]
				default_nvitem.alarm_time.hours = time->hours;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <time_set+0x2a4>)
 800153c:	715a      	strb	r2, [r3, #5]
				default_nvitem.alarm_time.minutes = time->minutes;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <time_set+0x2a4>)
 8001546:	719a      	strb	r2, [r3, #6]
				default_nvitem.alarm_time.seconds = time->seconds;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <time_set+0x2a4>)
 8001550:	71da      	strb	r2, [r3, #7]
				flash_write1(ADDR_FLASH_SECTOR_3, ADDR_FLASH_SECTOR_4, time);
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4908      	ldr	r1, [pc, #32]	; (8001578 <time_set+0x2b0>)
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <time_set+0x2b4>)
 8001558:	f7ff fb86 	bl	8000c68 <flash_write1>
			}
			current_state.mode = NORMAL_STATE;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <time_set+0x2a0>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
			break;
 8001562:	e052      	b.n	800160a <time_set+0x342>
 8001564:	20000191 	.word	0x20000191
 8001568:	2000012c 	.word	0x2000012c
 800156c:	20000154 	.word	0x20000154
 8001570:	08108000 	.word	0x08108000
 8001574:	08104000 	.word	0x08104000
 8001578:	08010000 	.word	0x08010000
 800157c:	0800c000 	.word	0x0800c000
		case LEFT:
			pos--;
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <time_set+0x354>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3b01      	subs	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <time_set+0x354>)
 800158c:	701a      	strb	r2, [r3, #0]
			break;
 800158e:	e03c      	b.n	800160a <time_set+0x342>
		case UP:
			time->seconds++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	b25a      	sxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	70da      	strb	r2, [r3, #3]
			if(time->seconds>=60)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015a8:	2b3b      	cmp	r3, #59	; 0x3b
 80015aa:	dd2b      	ble.n	8001604 <time_set+0x33c>
				time->seconds = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	70da      	strb	r2, [r3, #3]
			break;
 80015b2:	e027      	b.n	8001604 <time_set+0x33c>
		case DOWN:
			time->seconds--;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3b01      	subs	r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	70da      	strb	r2, [r3, #3]
			if(time->seconds<0)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da1b      	bge.n	8001608 <time_set+0x340>
				time->seconds = 59;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	223b      	movs	r2, #59	; 0x3b
 80015d4:	70da      	strb	r2, [r3, #3]
			break;
 80015d6:	e017      	b.n	8001608 <time_set+0x340>
			break;
 80015d8:	bf00      	nop
 80015da:	e016      	b.n	800160a <time_set+0x342>
			break;
 80015dc:	bf00      	nop
 80015de:	e014      	b.n	800160a <time_set+0x342>
			break;
 80015e0:	bf00      	nop
 80015e2:	e012      	b.n	800160a <time_set+0x342>
			break;
 80015e4:	bf00      	nop
 80015e6:	e010      	b.n	800160a <time_set+0x342>
			break;
 80015e8:	bf00      	nop
 80015ea:	e00e      	b.n	800160a <time_set+0x342>
			break;
 80015ec:	bf00      	nop
 80015ee:	e00c      	b.n	800160a <time_set+0x342>
			break;
 80015f0:	bf00      	nop
 80015f2:	e00a      	b.n	800160a <time_set+0x342>
			break;
 80015f4:	bf00      	nop
 80015f6:	e008      	b.n	800160a <time_set+0x342>
			break;
 80015f8:	bf00      	nop
 80015fa:	e006      	b.n	800160a <time_set+0x342>
		default:
			break;
		}
	}
 80015fc:	bf00      	nop
 80015fe:	e004      	b.n	800160a <time_set+0x342>
			break;
 8001600:	bf00      	nop
 8001602:	e002      	b.n	800160a <time_set+0x342>
			break;
 8001604:	bf00      	nop
 8001606:	e000      	b.n	800160a <time_set+0x342>
			break;
 8001608:	bf00      	nop

	blink(time, str);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd6f 	bl	80010f0 <blink>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000191 	.word	0x20000191

08001620 <flash_read>:

void flash_read(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	current_state.mode = NORMAL_STATE;
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <flash_read+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
	current_state.button = NONE;
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <flash_read+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	705a      	strb	r2, [r3, #1]
	current_state.music_num = 0;
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <flash_read+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	709a      	strb	r2, [r3, #2]

	//memcpy(&default_nvitem,nv_items,sizeof(NVitemTypeDef));
	stime.ampm = *((uint32_t*)0x08104000);
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <flash_read+0x9c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b25a      	sxtb	r2, r3
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <flash_read+0xa0>)
 800163e:	701a      	strb	r2, [r3, #0]
	stime.hours = *((uint32_t*)0x08104004);
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <flash_read+0xa4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b25a      	sxtb	r2, r3
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <flash_read+0xa0>)
 8001648:	705a      	strb	r2, [r3, #1]
	stime.minutes = *((uint32_t*)0x08104008);
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <flash_read+0xa8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b25a      	sxtb	r2, r3
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <flash_read+0xa0>)
 8001652:	709a      	strb	r2, [r3, #2]
	stime.seconds = *((uint32_t*)0x0810400C);
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <flash_read+0xac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b25a      	sxtb	r2, r3
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <flash_read+0xa0>)
 800165c:	70da      	strb	r2, [r3, #3]

	ctime.ampm = stime.ampm;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <flash_read+0xa0>)
 8001660:	f993 2000 	ldrsb.w	r2, [r3]
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <flash_read+0xb0>)
 8001666:	701a      	strb	r2, [r3, #0]
	ctime.hours = stime.hours;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <flash_read+0xa0>)
 800166a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <flash_read+0xb0>)
 8001670:	705a      	strb	r2, [r3, #1]
	ctime.minutes = stime.minutes;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <flash_read+0xa0>)
 8001674:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <flash_read+0xb0>)
 800167a:	709a      	strb	r2, [r3, #2]
	ctime.seconds = stime.seconds;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <flash_read+0xa0>)
 800167e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <flash_read+0xb0>)
 8001684:	70da      	strb	r2, [r3, #3]

	atime.ampm = *((uint32_t*)0x0800C000);
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <flash_read+0xb4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b25a      	sxtb	r2, r3
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <flash_read+0xb8>)
 800168e:	701a      	strb	r2, [r3, #0]
	atime.hours = *((uint32_t*)0x0800C004);
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <flash_read+0xbc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b25a      	sxtb	r2, r3
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <flash_read+0xb8>)
 8001698:	705a      	strb	r2, [r3, #1]
	//atime.hours = *((uint32_t*)0x0810400K);
	atime.minutes = *((uint32_t*)0x0800C008);
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <flash_read+0xc0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <flash_read+0xb8>)
 80016a2:	709a      	strb	r2, [r3, #2]
	atime.seconds = *((uint32_t*)0x0800C00C);
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <flash_read+0xc4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <flash_read+0xb8>)
 80016ac:	70da      	strb	r2, [r3, #3]
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	2000012c 	.word	0x2000012c
 80016bc:	08104000 	.word	0x08104000
 80016c0:	20000134 	.word	0x20000134
 80016c4:	08104004 	.word	0x08104004
 80016c8:	08104008 	.word	0x08104008
 80016cc:	0810400c 	.word	0x0810400c
 80016d0:	20000130 	.word	0x20000130
 80016d4:	0800c000 	.word	0x0800c000
 80016d8:	20000138 	.word	0x20000138
 80016dc:	0800c004 	.word	0x0800c004
 80016e0:	0800c008 	.word	0x0800c008
 80016e4:	0800c00c 	.word	0x0800c00c

080016e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	d135      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		if((timer_count%100)==0)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001700:	fb83 1302 	smull	r1, r3, r3, r2
 8001704:	1159      	asrs	r1, r3, #5
 8001706:	17d3      	asrs	r3, r2, #31
 8001708:	1acb      	subs	r3, r1, r3
 800170a:	2164      	movs	r1, #100	; 0x64
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10b      	bne.n	800172e <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			ctime.seconds++;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001718:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3301      	adds	r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b25a      	sxtb	r2, r3
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001726:	70da      	strb	r2, [r3, #3]
			clock_set(&ctime);
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800172a:	f7ff fc8d 	bl	8001048 <clock_set>
		}
		timer_count++;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001736:	6013      	str	r3, [r2, #0]
		if (timer_count % 10 == 0 && timer_count != 0)
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800173e:	fb83 2301 	smull	r2, r3, r3, r1
 8001742:	109a      	asrs	r2, r3, #2
 8001744:	17cb      	asrs	r3, r1, #31
 8001746:	1ad2      	subs	r2, r2, r3
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	1aca      	subs	r2, r1, r3
 8001752:	2a00      	cmp	r2, #0
 8001754:	d107      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x7e>
			old_count = timer_count;
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001764:	6013      	str	r3, [r2, #0]
	}
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000160 	.word	0x20000160
 8001774:	51eb851f 	.word	0x51eb851f
 8001778:	20000130 	.word	0x20000130
 800177c:	66666667 	.word	0x66666667
 8001780:	20000164 	.word	0x20000164

08001784 <adc_rcv>:

void adc_rcv(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001788:	4833      	ldr	r0, [pc, #204]	; (8001858 <adc_rcv+0xd4>)
 800178a:	f000 fff9 	bl	8002780 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1,20) == HAL_OK) adc_value = HAL_ADC_GetValue(&hadc1);
 800178e:	2114      	movs	r1, #20
 8001790:	4831      	ldr	r0, [pc, #196]	; (8001858 <adc_rcv+0xd4>)
 8001792:	f001 f8c7 	bl	8002924 <HAL_ADC_PollForConversion>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <adc_rcv+0x24>
 800179c:	482e      	ldr	r0, [pc, #184]	; (8001858 <adc_rcv+0xd4>)
 800179e:	f001 f94c 	bl	8002a3a <HAL_ADC_GetValue>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a2d      	ldr	r2, [pc, #180]	; (800185c <adc_rcv+0xd8>)
 80017a6:	6013      	str	r3, [r2, #0]

	if (adc_value <= UP_KEY_MAX || btn_value == 1)
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <adc_rcv+0xd8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d903      	bls.n	80017b8 <adc_rcv+0x34>
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <adc_rcv+0xdc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <adc_rcv+0x42>
	{
		current_state.button = UP;
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <adc_rcv+0xe0>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	705a      	strb	r2, [r3, #1]
		btn_value = 0;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <adc_rcv+0xdc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e045      	b.n	8001852 <adc_rcv+0xce>
	}
	else if ((adc_value>= DOWN_KEY_MIN && adc_value<=DOWN_KEY_MAX) || btn_value == 2)
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <adc_rcv+0xd8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80017ce:	d304      	bcc.n	80017da <adc_rcv+0x56>
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <adc_rcv+0xd8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80017d8:	d903      	bls.n	80017e2 <adc_rcv+0x5e>
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <adc_rcv+0xdc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d106      	bne.n	80017f0 <adc_rcv+0x6c>
	{
		current_state.button = DOWN;
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <adc_rcv+0xe0>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	705a      	strb	r2, [r3, #1]
		btn_value = 0;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <adc_rcv+0xdc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e030      	b.n	8001852 <adc_rcv+0xce>
	}
	else if ((adc_value>= LEFT_KEY_MIN && adc_value<=LEFT_KEY_MAX) || btn_value == 4)
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <adc_rcv+0xd8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f240 726b 	movw	r2, #1899	; 0x76b
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d904      	bls.n	8001806 <adc_rcv+0x82>
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <adc_rcv+0xd8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001804:	d903      	bls.n	800180e <adc_rcv+0x8a>
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <adc_rcv+0xdc>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d106      	bne.n	800181c <adc_rcv+0x98>
	{
		current_state.button = LEFT;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <adc_rcv+0xe0>)
 8001810:	2204      	movs	r2, #4
 8001812:	705a      	strb	r2, [r3, #1]
		btn_value = 0;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <adc_rcv+0xdc>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e01a      	b.n	8001852 <adc_rcv+0xce>
	}
	else if ((adc_value>= RIGHT_KEY_MIN && adc_value<=RIGHT_KEY_MAX) || btn_value == 3)
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <adc_rcv+0xd8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f640 3253 	movw	r2, #2899	; 0xb53
 8001824:	4293      	cmp	r3, r2
 8001826:	d905      	bls.n	8001834 <adc_rcv+0xb0>
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <adc_rcv+0xd8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001830:	4293      	cmp	r3, r2
 8001832:	d903      	bls.n	800183c <adc_rcv+0xb8>
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <adc_rcv+0xdc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d106      	bne.n	800184a <adc_rcv+0xc6>
	{
		current_state.button = RIGHT;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <adc_rcv+0xe0>)
 800183e:	2203      	movs	r2, #3
 8001840:	705a      	strb	r2, [r3, #1]
		btn_value = 0;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <adc_rcv+0xdc>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e003      	b.n	8001852 <adc_rcv+0xce>
	}
	else
	{
		current_state.button = NONE;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <adc_rcv+0xe0>)
 800184c:	2200      	movs	r2, #0
 800184e:	705a      	strb	r2, [r3, #1]
	}
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000008c 	.word	0x2000008c
 800185c:	2000018c 	.word	0x2000018c
 8001860:	20000190 	.word	0x20000190
 8001864:	2000012c 	.word	0x2000012c

08001868 <time_display>:

void time_display(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af02      	add	r7, sp, #8
	memset(line,0,sizeof(line));
 800186e:	2224      	movs	r2, #36	; 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	4844      	ldr	r0, [pc, #272]	; (8001984 <time_display+0x11c>)
 8001874:	f005 ff42 	bl	80076fc <memset>

	if(current_state.mode == NORMAL_STATE)
 8001878:	4b43      	ldr	r3, [pc, #268]	; (8001988 <time_display+0x120>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d13d      	bne.n	80018fc <time_display+0x94>
	{
		sprintf(line[0],"Korea Polytech");
 8001880:	4942      	ldr	r1, [pc, #264]	; (800198c <time_display+0x124>)
 8001882:	4840      	ldr	r0, [pc, #256]	; (8001984 <time_display+0x11c>)
 8001884:	f005 ff76 	bl	8007774 <siprintf>
		if (ctime.ampm == 0) sprintf(line[1],"AM %02d:%02d:%02d", ctime.hours, ctime.minutes, ctime.seconds);
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <time_display+0x128>)
 800188a:	f993 3000 	ldrsb.w	r3, [r3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d111      	bne.n	80018b6 <time_display+0x4e>
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <time_display+0x128>)
 8001894:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001898:	461a      	mov	r2, r3
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <time_display+0x128>)
 800189c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <time_display+0x128>)
 80018a4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	460b      	mov	r3, r1
 80018ac:	4939      	ldr	r1, [pc, #228]	; (8001994 <time_display+0x12c>)
 80018ae:	483a      	ldr	r0, [pc, #232]	; (8001998 <time_display+0x130>)
 80018b0:	f005 ff60 	bl	8007774 <siprintf>
 80018b4:	e015      	b.n	80018e2 <time_display+0x7a>
		else if (ctime.ampm == 1) sprintf(line[1],"PM %02d:%02d:%02d", ctime.hours, ctime.minutes, ctime.seconds);
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <time_display+0x128>)
 80018b8:	f993 3000 	ldrsb.w	r3, [r3]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d110      	bne.n	80018e2 <time_display+0x7a>
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <time_display+0x128>)
 80018c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <time_display+0x128>)
 80018ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <time_display+0x128>)
 80018d2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	460b      	mov	r3, r1
 80018da:	4930      	ldr	r1, [pc, #192]	; (800199c <time_display+0x134>)
 80018dc:	482e      	ldr	r0, [pc, #184]	; (8001998 <time_display+0x130>)
 80018de:	f005 ff49 	bl	8007774 <siprintf>
		if (timer_count - old_count == 10)
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <time_display+0x138>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <time_display+0x13c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b0a      	cmp	r3, #10
 80018ee:	d13e      	bne.n	800196e <time_display+0x106>
			flash_write1(ADDR_FLASH_SECTOR_13, ADDR_FLASH_SECTOR_14, &ctime);
 80018f0:	4a27      	ldr	r2, [pc, #156]	; (8001990 <time_display+0x128>)
 80018f2:	492d      	ldr	r1, [pc, #180]	; (80019a8 <time_display+0x140>)
 80018f4:	482d      	ldr	r0, [pc, #180]	; (80019ac <time_display+0x144>)
 80018f6:	f7ff f9b7 	bl	8000c68 <flash_write1>
 80018fa:	e038      	b.n	800196e <time_display+0x106>
	}
	else if(current_state.mode == TIME_SETTING)
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <time_display+0x120>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d11c      	bne.n	800193e <time_display+0xd6>
	{
		sprintf(line[0],"Time Setting  ");
 8001904:	492a      	ldr	r1, [pc, #168]	; (80019b0 <time_display+0x148>)
 8001906:	481f      	ldr	r0, [pc, #124]	; (8001984 <time_display+0x11c>)
 8001908:	f005 ff34 	bl	8007774 <siprintf>
		time_set(&stime, line[1]);
 800190c:	4922      	ldr	r1, [pc, #136]	; (8001998 <time_display+0x130>)
 800190e:	4829      	ldr	r0, [pc, #164]	; (80019b4 <time_display+0x14c>)
 8001910:	f7ff fcda 	bl	80012c8 <time_set>
		ctime.ampm = default_nvitem.setting_time.ampm;
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <time_display+0x150>)
 8001916:	f993 2000 	ldrsb.w	r2, [r3]
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <time_display+0x128>)
 800191c:	701a      	strb	r2, [r3, #0]
		ctime.hours = default_nvitem.setting_time.hours;
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <time_display+0x150>)
 8001920:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <time_display+0x128>)
 8001926:	705a      	strb	r2, [r3, #1]
		ctime.minutes = default_nvitem.setting_time.minutes;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <time_display+0x150>)
 800192a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <time_display+0x128>)
 8001930:	709a      	strb	r2, [r3, #2]
		ctime.seconds = default_nvitem.setting_time.seconds;
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <time_display+0x150>)
 8001934:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <time_display+0x128>)
 800193a:	70da      	strb	r2, [r3, #3]
 800193c:	e017      	b.n	800196e <time_display+0x106>
	}
	else if(current_state.mode == ALARM_TIME_SETTING)
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <time_display+0x120>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d108      	bne.n	8001958 <time_display+0xf0>
	{
		sprintf(line[0],"Alarm Setting ");
 8001946:	491d      	ldr	r1, [pc, #116]	; (80019bc <time_display+0x154>)
 8001948:	480e      	ldr	r0, [pc, #56]	; (8001984 <time_display+0x11c>)
 800194a:	f005 ff13 	bl	8007774 <siprintf>
		time_set(&atime, line[1]);
 800194e:	4912      	ldr	r1, [pc, #72]	; (8001998 <time_display+0x130>)
 8001950:	481b      	ldr	r0, [pc, #108]	; (80019c0 <time_display+0x158>)
 8001952:	f7ff fcb9 	bl	80012c8 <time_set>
 8001956:	e00a      	b.n	800196e <time_display+0x106>
	}
	else if (current_state.mode == MUSIC_SELECT)
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <time_display+0x120>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d106      	bne.n	800196e <time_display+0x106>
	{
		sprintf(line[0],"Music Setting ");
 8001960:	4918      	ldr	r1, [pc, #96]	; (80019c4 <time_display+0x15c>)
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <time_display+0x11c>)
 8001964:	f005 ff06 	bl	8007774 <siprintf>
		music_select(line[1]);
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <time_display+0x130>)
 800196a:	f000 f845 	bl	80019f8 <music_select>
	}

	LCDPrint(0, line[0]);
 800196e:	4905      	ldr	r1, [pc, #20]	; (8001984 <time_display+0x11c>)
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff f952 	bl	8000c1a <LCDPrint>
	LCDPrint(1, line[1]);
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <time_display+0x130>)
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff f94e 	bl	8000c1a <LCDPrint>
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000168 	.word	0x20000168
 8001988:	2000012c 	.word	0x2000012c
 800198c:	0800811c 	.word	0x0800811c
 8001990:	20000130 	.word	0x20000130
 8001994:	08008078 	.word	0x08008078
 8001998:	2000017a 	.word	0x2000017a
 800199c:	0800808c 	.word	0x0800808c
 80019a0:	20000160 	.word	0x20000160
 80019a4:	20000164 	.word	0x20000164
 80019a8:	08108000 	.word	0x08108000
 80019ac:	08104000 	.word	0x08104000
 80019b0:	0800812c 	.word	0x0800812c
 80019b4:	20000134 	.word	0x20000134
 80019b8:	20000154 	.word	0x20000154
 80019bc:	0800813c 	.word	0x0800813c
 80019c0:	20000138 	.word	0x20000138
 80019c4:	0800814c 	.word	0x0800814c

080019c8 <HAL_UART_RxCpltCallback>:

uint32_t last_time,current_time,time_interval, last_time_interval;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_UART_RxCpltCallback+0x24>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d104      	bne.n	80019e4 <HAL_UART_RxCpltCallback+0x1c>
  {
	  HAL_UART_Receive_IT(&huart6, &btn_value, 1);
 80019da:	2201      	movs	r2, #1
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <HAL_UART_RxCpltCallback+0x28>)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_UART_RxCpltCallback+0x2c>)
 80019e0:	f004 fec9 	bl	8006776 <HAL_UART_Receive_IT>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40011400 	.word	0x40011400
 80019f0:	20000190 	.word	0x20000190
 80019f4:	200002e8 	.word	0x200002e8

080019f8 <music_select>:

void music_select(char str[18])
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  int pos2, count;

  pos2 = current_state.music_num;
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <music_select+0xd4>)
 8001a02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001a06:	60fb      	str	r3, [r7, #12]
  count = sizeof(alarm_music)/sizeof(alarm_music[0]);  //total music count
 8001a08:	2303      	movs	r3, #3
 8001a0a:	60bb      	str	r3, [r7, #8]

  switch(current_state.button)
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <music_select+0xd4>)
 8001a0e:	785b      	ldrb	r3, [r3, #1]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d002      	beq.n	8001a1a <music_select+0x22>
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d00a      	beq.n	8001a2e <music_select+0x36>
    	{
          pos2 =count-1;
    	}
    	break;
    default:
    	break;
 8001a18:	e016      	b.n	8001a48 <music_select+0x50>
    	pos2++;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
    	if(pos2==count)
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d10c      	bne.n	8001a42 <music_select+0x4a>
          pos2 =0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
    	break;
 8001a2c:	e009      	b.n	8001a42 <music_select+0x4a>
    	pos2--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
    	if(pos2 < 0)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da05      	bge.n	8001a46 <music_select+0x4e>
          pos2 =count-1;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
    	break;
 8001a40:	e001      	b.n	8001a46 <music_select+0x4e>
    	break;
 8001a42:	bf00      	nop
 8001a44:	e000      	b.n	8001a48 <music_select+0x50>
    	break;
 8001a46:	bf00      	nop
  }
  current_state.music_num =  pos;
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <music_select+0xd8>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b25a      	sxtb	r2, r3
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <music_select+0xd4>)
 8001a52:	709a      	strb	r2, [r3, #2]

  memset(str,0,sizeof(str));
 8001a54:	2204      	movs	r2, #4
 8001a56:	2100      	movs	r1, #0
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f005 fe4f 	bl	80076fc <memset>
  if(pos2 == 0)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10c      	bne.n	8001a7e <music_select+0x86>
  {
    sprintf(str, "1. Jack Rabbit <<");
 8001a64:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <music_select+0xdc>)
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f005 fe84 	bl	8007774 <siprintf>
    if(muFlag == 1)
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <music_select+0xe0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d127      	bne.n	8001ac4 <music_select+0xcc>
    {
    	sprintf(str, "Mel1 Selected!\r\n");
 8001a74:	4919      	ldr	r1, [pc, #100]	; (8001adc <music_select+0xe4>)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f005 fe7c 	bl	8007774 <siprintf>
  		  sprintf(str, "Mel3 Selected!  ");
  		  //Memory1(ADDR_FLASH_SECTOR_14,ADDR_FLASH_SECTOR_15,melody1);
  		  //Memory1(ADDR_FLASH_SECTOR_15,ADDR_FLASH_SECTOR_16,noteDurations1);
  	  }
  }
}
 8001a7c:	e022      	b.n	8001ac4 <music_select+0xcc>
  else if(pos == 1)
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <music_select+0xd8>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d10c      	bne.n	8001aa2 <music_select+0xaa>
	  sprintf(str, "2. Carol Jazz <<");
 8001a88:	4915      	ldr	r1, [pc, #84]	; (8001ae0 <music_select+0xe8>)
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f005 fe72 	bl	8007774 <siprintf>
	  if(muFlag == 1)
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <music_select+0xe0>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d115      	bne.n	8001ac4 <music_select+0xcc>
		  sprintf(str, "Mel2 Selected!  ");
 8001a98:	4912      	ldr	r1, [pc, #72]	; (8001ae4 <music_select+0xec>)
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f005 fe6a 	bl	8007774 <siprintf>
}
 8001aa0:	e010      	b.n	8001ac4 <music_select+0xcc>
  else if(pos == 2)
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <music_select+0xd8>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d10b      	bne.n	8001ac4 <music_select+0xcc>
	  sprintf(str, "3. Big Mac Song <<");
 8001aac:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <music_select+0xf0>)
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f005 fe60 	bl	8007774 <siprintf>
  	  if(muFlag == 1)
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <music_select+0xe0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d103      	bne.n	8001ac4 <music_select+0xcc>
  		  sprintf(str, "Mel3 Selected!  ");
 8001abc:	490b      	ldr	r1, [pc, #44]	; (8001aec <music_select+0xf4>)
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f005 fe58 	bl	8007774 <siprintf>
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000012c 	.word	0x2000012c
 8001ad0:	20000191 	.word	0x20000191
 8001ad4:	0800815c 	.word	0x0800815c
 8001ad8:	2000015e 	.word	0x2000015e
 8001adc:	08008170 	.word	0x08008170
 8001ae0:	08008184 	.word	0x08008184
 8001ae4:	08008198 	.word	0x08008198
 8001ae8:	080081ac 	.word	0x080081ac
 8001aec:	080081c0 	.word	0x080081c0

08001af0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;
	int i;

	if (GPIO_Pin == GPIO_PIN_11)
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b00:	f040 80c5 	bne.w	8001c8e <HAL_GPIO_EXTI_Callback+0x19e>
	{
		current_time = HAL_GetTick();
 8001b04:	f000 fdc8 	bl	8002698 <HAL_GetTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a63      	ldr	r2, [pc, #396]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001b0c:	6013      	str	r3, [r2, #0]
		time_interval = current_time - last_time;
 8001b0e:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001b1a:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5e      	ldr	r2, [pc, #376]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001b22:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b28:	485e      	ldr	r0, [pc, #376]	; (8001ca4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001b2a:	f002 f817 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	72fb      	strb	r3, [r7, #11]
		//pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

		if (time_interval <= 2)
 8001b32:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	f240 80a9 	bls.w	8001c8e <HAL_GPIO_EXTI_Callback+0x19e>
		{
		}

		else
		{
			click[2].time = click[1].time;
 8001b3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a59      	ldr	r2, [pc, #356]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b42:	6113      	str	r3, [r2, #16]
			click[2].level = click[1].level;
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b46:	7b1a      	ldrb	r2, [r3, #12]
 8001b48:	4b57      	ldr	r3, [pc, #348]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b4a:	751a      	strb	r2, [r3, #20]

			click[1].time = click[0].time;
 8001b4c:	4b56      	ldr	r3, [pc, #344]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a55      	ldr	r2, [pc, #340]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b52:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8001b54:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b56:	791a      	ldrb	r2, [r3, #4]
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b5a:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b64:	601a      	str	r2, [r3, #0]
			click[0].level = pin;
 8001b66:	4a50      	ldr	r2, [pc, #320]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	7113      	strb	r3, [r2, #4]

			if(click[2].level ==GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET &&  click[0].level ==GPIO_PIN_RESET)
 8001b6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b6e:	7d1b      	ldrb	r3, [r3, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d14c      	bne.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
 8001b74:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d148      	bne.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b7e:	791b      	ldrb	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d144      	bne.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
			{
				for(i=0;i<3;i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e00e      	b.n	8001ba8 <HAL_GPIO_EXTI_Callback+0xb8>
				{
					if(click[i].time>= DOUBLE_CLICK_MIN && click[i].time <= DOUBLE_CLICK_MAX)
 8001b8a:	4a47      	ldr	r2, [pc, #284]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b92:	2b31      	cmp	r3, #49	; 0x31
 8001b94:	dd0b      	ble.n	8001bae <HAL_GPIO_EXTI_Callback+0xbe>
 8001b96:	4a44      	ldr	r2, [pc, #272]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b9e:	2b96      	cmp	r3, #150	; 0x96
 8001ba0:	dc05      	bgt.n	8001bae <HAL_GPIO_EXTI_Callback+0xbe>
				for(i=0;i<3;i++)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	dded      	ble.n	8001b8a <HAL_GPIO_EXTI_Callback+0x9a>
						continue;
					else break;
				}
				if(i==3)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d12c      	bne.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
				{
					if(current_state.mode == NORMAL_STATE)
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <HAL_GPIO_EXTI_Callback+0xda>
					{
						current_state.mode = MUSIC_SELECT;
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
						btn_value = SEL;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e021      	b.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
					}
					else if(current_state.mode == MUSIC_SELECT)
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d10a      	bne.n	8001be8 <HAL_GPIO_EXTI_Callback+0xf8>
					{
						btn_value = SEL;
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	701a      	strb	r2, [r3, #0]
						if(muFlag == 0) muFlag = 1;
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d116      	bne.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e012      	b.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
					}
					else if(current_state.mode == ALARM_TIME_SETTING)
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d10e      	bne.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
					{
						if(alFlag == 0)	alFlag = 1;
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d103      	bne.n	8001c00 <HAL_GPIO_EXTI_Callback+0x110>
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e006      	b.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
						else if(alFlag == 1) alFlag = 0;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d102      	bne.n	8001c0e <HAL_GPIO_EXTI_Callback+0x11e>
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if(click[0].level == GPIO_PIN_RESET && click[0].time >=LONG_CLICK_MIN && click[0].time <=LONG_CLICK_MAX)
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001c10:	791b      	ldrb	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d121      	bne.n	8001c5a <HAL_GPIO_EXTI_Callback+0x16a>
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	dd1b      	ble.n	8001c5a <HAL_GPIO_EXTI_Callback+0x16a>
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	dc15      	bgt.n	8001c5a <HAL_GPIO_EXTI_Callback+0x16a>
			{
				if(current_state.mode == NORMAL_STATE)
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_GPIO_EXTI_Callback+0x15a>
				{
					btn_value = SEL;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001c38:	2205      	movs	r2, #5
 8001c3a:	701a      	strb	r2, [r3, #0]
					alFlag = 1;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
					current_state.mode = ALARM_TIME_SETTING;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
				if(current_state.mode == NORMAL_STATE)
 8001c48:	e020      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x19c>
				}
				else if(current_state.mode == TIME_SETTING)
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d11c      	bne.n	8001c8c <HAL_GPIO_EXTI_Callback+0x19c>
				{
					current_state.mode = NORMAL_STATE;
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
				if(current_state.mode == NORMAL_STATE)
 8001c58:	e018      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x19c>
				}
			}

			else if(click[0].level == GPIO_PIN_RESET && click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX)
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001c5c:	791b      	ldrb	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_GPIO_EXTI_Callback+0x19e>
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	dc0f      	bgt.n	8001c8e <HAL_GPIO_EXTI_Callback+0x19e>
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b96      	cmp	r3, #150	; 0x96
 8001c74:	dd0b      	ble.n	8001c8e <HAL_GPIO_EXTI_Callback+0x19e>
			{
				if(current_state.mode == NORMAL_STATE)
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_GPIO_EXTI_Callback+0x19e>
				{
					current_state.mode = TIME_SETTING;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
					btn_value = SEL;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001c86:	2205      	movs	r2, #5
 8001c88:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001c8a:	e000      	b.n	8001c8e <HAL_GPIO_EXTI_Callback+0x19e>
				if(current_state.mode == NORMAL_STATE)
 8001c8c:	bf00      	nop
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000198 	.word	0x20000198
 8001c9c:	20000194 	.word	0x20000194
 8001ca0:	2000019c 	.word	0x2000019c
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	2000013c 	.word	0x2000013c
 8001cac:	2000012c 	.word	0x2000012c
 8001cb0:	20000190 	.word	0x20000190
 8001cb4:	2000015e 	.word	0x2000015e
 8001cb8:	2000015d 	.word	0x2000015d

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc0:	f000 fc84 	bl	80025cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc4:	f000 f82e 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc8:	f7fe fd02 	bl	80006d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ccc:	f000 fb80 	bl	80023d0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001cd0:	f7fe fc68 	bl	80005a4 <MX_ADC1_Init>
  MX_RTC_Init();
 8001cd4:	f000 f8ca 	bl	8001e6c <MX_RTC_Init>
  MX_USART6_UART_Init();
 8001cd8:	f000 fba4 	bl	8002424 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001cdc:	f7fe fe08 	bl	80008f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ce0:	f000 f9de 	bl	80020a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ce4:	f000 fa2a 	bl	800213c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ce8:	f000 fa9e 	bl	8002228 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001cec:	f000 f88c 	bl	8001e08 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001cf0:	f7fe ffb0 	bl	8000c54 <init>
  HAL_TIM_Base_Init(&htim2);
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <main+0x5c>)
 8001cf6:	f003 fd11 	bl	800571c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001cfa:	4807      	ldr	r0, [pc, #28]	; (8001d18 <main+0x5c>)
 8001cfc:	f003 fd5e 	bl	80057bc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart6, &btn_value, 1);
 8001d00:	2201      	movs	r2, #1
 8001d02:	4906      	ldr	r1, [pc, #24]	; (8001d1c <main+0x60>)
 8001d04:	4806      	ldr	r0, [pc, #24]	; (8001d20 <main+0x64>)
 8001d06:	f004 fd36 	bl	8006776 <HAL_UART_Receive_IT>

  flash_read();
 8001d0a:	f7ff fc89 	bl	8001620 <flash_read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adc_rcv();
 8001d0e:	f7ff fd39 	bl	8001784 <adc_rcv>
	  time_display();
 8001d12:	f7ff fda9 	bl	8001868 <time_display>
	  adc_rcv();
 8001d16:	e7fa      	b.n	8001d0e <main+0x52>
 8001d18:	200001cc 	.word	0x200001cc
 8001d1c:	20000190 	.word	0x20000190
 8001d20:	200002e8 	.word	0x200002e8

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	; 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 0320 	add.w	r3, r7, #32
 8001d2e:	2230      	movs	r2, #48	; 0x30
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f005 fce2 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <SystemClock_Config+0xdc>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a2b      	ldr	r2, [pc, #172]	; (8001e00 <SystemClock_Config+0xdc>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <SystemClock_Config+0xdc>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001d80:	2306      	movs	r3, #6
 8001d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d90:	2302      	movs	r3, #2
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d9c:	23b4      	movs	r3, #180	; 0xb4
 8001d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001da4:	2307      	movs	r3, #7
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da8:	f107 0320 	add.w	r3, r7, #32
 8001dac:	4618      	mov	r0, r3
 8001dae:	f002 fd63 	bl	8004878 <HAL_RCC_OscConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001db8:	f000 f852 	bl	8001e60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dbc:	f002 fd0c 	bl	80047d8 <HAL_PWREx_EnableOverDrive>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dc6:	f000 f84b 	bl	8001e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dca:	230f      	movs	r3, #15
 8001dcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2105      	movs	r1, #5
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 ffbd 	bl	8004d68 <HAL_RCC_ClockConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001df4:	f000 f834 	bl	8001e60 <Error_Handler>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3750      	adds	r7, #80	; 0x50
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000

08001e08 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2028      	movs	r0, #40	; 0x28
 8001e12:	f001 f928 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e16:	2028      	movs	r0, #40	; 0x28
 8001e18:	f001 f941 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	201c      	movs	r0, #28
 8001e22:	f001 f920 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e26:	201c      	movs	r0, #28
 8001e28:	f001 f939 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	201e      	movs	r0, #30
 8001e32:	f001 f918 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e36:	201e      	movs	r0, #30
 8001e38:	f001 f931 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2047      	movs	r0, #71	; 0x47
 8001e42:	f001 f910 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e46:	2047      	movs	r0, #71	; 0x47
 8001e48:	f001 f929 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2027      	movs	r0, #39	; 0x27
 8001e52:	f001 f908 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e56:	2027      	movs	r0, #39	; 0x27
 8001e58:	f001 f921 	bl	800309e <HAL_NVIC_EnableIRQ>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>
	...

08001e6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <MX_RTC_Init+0x48>)
 8001e74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e7e:	227f      	movs	r2, #127	; 0x7f
 8001e80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e84:	22ff      	movs	r2, #255	; 0xff
 8001e86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e9c:	f003 fb44 	bl	8005528 <HAL_RTC_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001ea6:	f7ff ffdb 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200001a8 	.word	0x200001a8
 8001eb4:	40002800 	.word	0x40002800

08001eb8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	; 0x38
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	2230      	movs	r2, #48	; 0x30
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 fc17 	bl	80076fc <memset>
  if(rtcHandle->Instance==RTC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_RTC_MspInit+0x4c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 f95e 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ef2:	f7ff ffb5 	bl	8001e60 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_RTC_MspInit+0x50>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	3738      	adds	r7, #56	; 0x38
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40002800 	.word	0x40002800
 8001f08:	42470e3c 	.word	0x42470e3c

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <NMI_Handler+0x4>

08001f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <MemManage_Handler+0x4>

08001f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa8:	f000 fb62 	bl	8002670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM2_IRQHandler+0x10>)
 8001fb6:	f003 fcca 	bl	800594e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200001cc 	.word	0x200001cc

08001fc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM4_IRQHandler+0x10>)
 8001fca:	f003 fcc0 	bl	800594e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000025c 	.word	0x2000025c

08001fd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <USART3_IRQHandler+0x10>)
 8001fde:	f004 fbfb 	bl	80067d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200002a4 	.word	0x200002a4

08001fec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ff0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ff4:	f001 fde4 	bl	8003bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <USART6_IRQHandler+0x10>)
 8002002:	f004 fbe9 	bl	80067d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200002e8 	.word	0x200002e8

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f005 fb32 	bl	80076a8 <__errno>
 8002044:	4603      	mov	r3, r0
 8002046:	220c      	movs	r2, #12
 8002048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20030000 	.word	0x20030000
 8002070:	00000400 	.word	0x00000400
 8002074:	200001c8 	.word	0x200001c8
 8002078:	20000360 	.word	0x20000360

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <SystemInit+0x20>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <SystemInit+0x20>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <MX_TIM2_Init+0x98>)
 80020be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <MX_TIM2_Init+0x98>)
 80020c6:	f240 3283 	movw	r2, #899	; 0x383
 80020ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <MX_TIM2_Init+0x98>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <MX_TIM2_Init+0x98>)
 80020d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <MX_TIM2_Init+0x98>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b15      	ldr	r3, [pc, #84]	; (8002138 <MX_TIM2_Init+0x98>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e6:	4814      	ldr	r0, [pc, #80]	; (8002138 <MX_TIM2_Init+0x98>)
 80020e8:	f003 fb18 	bl	800571c <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020f2:	f7ff feb5 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	4619      	mov	r1, r3
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <MX_TIM2_Init+0x98>)
 8002104:	f003 fdee 	bl	8005ce4 <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800210e:	f7ff fea7 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	4619      	mov	r1, r3
 800211e:	4806      	ldr	r0, [pc, #24]	; (8002138 <MX_TIM2_Init+0x98>)
 8002120:	f004 f9ba 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800212a:	f7ff fe99 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200001cc 	.word	0x200001cc

0800213c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08e      	sub	sp, #56	; 0x38
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	f107 0320 	add.w	r3, r7, #32
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
 8002168:	615a      	str	r2, [r3, #20]
 800216a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <MX_TIM3_Init+0xe4>)
 800216e:	4a2d      	ldr	r2, [pc, #180]	; (8002224 <MX_TIM3_Init+0xe8>)
 8002170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <MX_TIM3_Init+0xe4>)
 8002174:	2259      	movs	r2, #89	; 0x59
 8002176:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <MX_TIM3_Init+0xe4>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <MX_TIM3_Init+0xe4>)
 8002180:	22c7      	movs	r2, #199	; 0xc7
 8002182:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002184:	4b26      	ldr	r3, [pc, #152]	; (8002220 <MX_TIM3_Init+0xe4>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <MX_TIM3_Init+0xe4>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002190:	4823      	ldr	r0, [pc, #140]	; (8002220 <MX_TIM3_Init+0xe4>)
 8002192:	f003 fac3 	bl	800571c <HAL_TIM_Base_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800219c:	f7ff fe60 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	4619      	mov	r1, r3
 80021ac:	481c      	ldr	r0, [pc, #112]	; (8002220 <MX_TIM3_Init+0xe4>)
 80021ae:	f003 fd99 	bl	8005ce4 <HAL_TIM_ConfigClockSource>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80021b8:	f7ff fe52 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021bc:	4818      	ldr	r0, [pc, #96]	; (8002220 <MX_TIM3_Init+0xe4>)
 80021be:	f003 fb6d 	bl	800589c <HAL_TIM_PWM_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80021c8:	f7ff fe4a 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	4619      	mov	r1, r3
 80021da:	4811      	ldr	r0, [pc, #68]	; (8002220 <MX_TIM3_Init+0xe4>)
 80021dc:	f004 f95c 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80021e6:	f7ff fe3b 	bl	8001e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ea:	2360      	movs	r3, #96	; 0x60
 80021ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2204      	movs	r2, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	4807      	ldr	r0, [pc, #28]	; (8002220 <MX_TIM3_Init+0xe4>)
 8002202:	f003 fcad 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800220c:	f7ff fe28 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <MX_TIM3_Init+0xe4>)
 8002212:	f000 f8a3 	bl	800235c <HAL_TIM_MspPostInit>

}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000214 	.word	0x20000214
 8002224:	40000400 	.word	0x40000400

08002228 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223c:	463b      	mov	r3, r7
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <MX_TIM4_Init+0x94>)
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <MX_TIM4_Init+0x98>)
 8002248:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8999;
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <MX_TIM4_Init+0x94>)
 800224c:	f242 3227 	movw	r2, #8999	; 0x2327
 8002250:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <MX_TIM4_Init+0x94>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <MX_TIM4_Init+0x94>)
 800225a:	22c7      	movs	r2, #199	; 0xc7
 800225c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <MX_TIM4_Init+0x94>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <MX_TIM4_Init+0x94>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800226a:	4814      	ldr	r0, [pc, #80]	; (80022bc <MX_TIM4_Init+0x94>)
 800226c:	f003 fa56 	bl	800571c <HAL_TIM_Base_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002276:	f7ff fdf3 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	; (80022bc <MX_TIM4_Init+0x94>)
 8002288:	f003 fd2c 	bl	8005ce4 <HAL_TIM_ConfigClockSource>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002292:	f7ff fde5 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_TIM4_Init+0x94>)
 80022a4:	f004 f8f8 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80022ae:	f7ff fdd7 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000025c 	.word	0x2000025c
 80022c0:	40000800 	.word	0x40000800

080022c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022f2:	e026      	b.n	8002342 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_TIM_Base_MspInit+0x90>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10e      	bne.n	800231c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
}
 800231a:	e012      	b.n	8002342 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_TIM_Base_MspInit+0x94>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10d      	bne.n	8002342 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_TIM_Base_MspInit+0x8c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800

0800235c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_TIM_MspPostInit+0x68>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d11d      	bne.n	80023ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_TIM_MspPostInit+0x70>)
 80023b6:	f001 fa25 	bl	8003804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000

080023d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <MX_USART3_UART_Init+0x50>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART3_UART_Init+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_USART3_UART_Init+0x4c>)
 8002408:	f004 f8d6 	bl	80065b8 <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002412:	f7ff fd25 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002a4 	.word	0x200002a4
 8002420:	40004800 	.word	0x40004800

08002424 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <MX_USART6_UART_Init+0x50>)
 800242c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002434:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800244a:	220c      	movs	r2, #12
 800244c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800245c:	f004 f8ac 	bl	80065b8 <HAL_UART_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002466:	f7ff fcfb 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200002e8 	.word	0x200002e8
 8002474:	40011400 	.word	0x40011400

08002478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_UART_MspInit+0xec>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d12d      	bne.n	80024f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_UART_MspInit+0xf0>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a31      	ldr	r2, [pc, #196]	; (8002568 <HAL_UART_MspInit+0xf0>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_UART_MspInit+0xf0>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_UART_MspInit+0xf0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a2a      	ldr	r2, [pc, #168]	; (8002568 <HAL_UART_MspInit+0xf0>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_UART_MspInit+0xf0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e4:	2307      	movs	r3, #7
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	481f      	ldr	r0, [pc, #124]	; (800256c <HAL_UART_MspInit+0xf4>)
 80024f0:	f001 f988 	bl	8003804 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024f4:	e031      	b.n	800255a <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART6)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_UART_MspInit+0xf8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d12c      	bne.n	800255a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_UART_MspInit+0xf0>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HAL_UART_MspInit+0xf0>)
 800250a:	f043 0320 	orr.w	r3, r3, #32
 800250e:	6453      	str	r3, [r2, #68]	; 0x44
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_UART_MspInit+0xf0>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_UART_MspInit+0xf0>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a10      	ldr	r2, [pc, #64]	; (8002568 <HAL_UART_MspInit+0xf0>)
 8002526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_UART_MspInit+0xf0>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002538:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800254a:	2308      	movs	r3, #8
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	4807      	ldr	r0, [pc, #28]	; (8002574 <HAL_UART_MspInit+0xfc>)
 8002556:	f001 f955 	bl	8003804 <HAL_GPIO_Init>
}
 800255a:	bf00      	nop
 800255c:	3730      	adds	r7, #48	; 0x30
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40004800 	.word	0x40004800
 8002568:	40023800 	.word	0x40023800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40011400 	.word	0x40011400
 8002574:	40021800 	.word	0x40021800

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800257e:	490e      	ldr	r1, [pc, #56]	; (80025b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002594:	4c0b      	ldr	r4, [pc, #44]	; (80025c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025a2:	f7ff fd6b 	bl	800207c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f005 f885 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7ff fb87 	bl	8001cbc <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025bc:	08008230 	.word	0x08008230
  ldr r2, =_sbss
 80025c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025c4:	20000360 	.word	0x20000360

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>
	...

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <HAL_Init+0x40>)
 80025d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_Init+0x40>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_Init+0x40>)
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_Init+0x40>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f000 fd2b 	bl	8003050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f808 	bl	8002610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002600:	f7ff fc84 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x54>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	fbb3 f3f1 	udiv	r3, r3, r1
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fd43 	bl	80030ba <HAL_SYSTICK_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d80a      	bhi.n	800265a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f000 fd0b 	bl	8003066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_InitTick+0x5c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000000 	.word	0x20000000
 8002668:	20000008 	.word	0x20000008
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000008 	.word	0x20000008
 8002694:	2000032c 	.word	0x2000032c

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	2000032c 	.word	0x2000032c

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff ffee 	bl	8002698 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffde 	bl	8002698 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000008 	.word	0x20000008

080026f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e033      	b.n	8002776 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fd ff96 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800273e:	f023 0302 	bic.w	r3, r3, #2
 8002742:	f043 0202 	orr.w	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fab4 	bl	8002cb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
 8002766:	e001      	b.n	800276c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ADC_Start+0x1a>
 8002796:	2302      	movs	r3, #2
 8002798:	e0b2      	b.n	8002900 <HAL_ADC_Start+0x180>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d018      	beq.n	80027e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027c0:	4b52      	ldr	r3, [pc, #328]	; (800290c <HAL_ADC_Start+0x18c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_ADC_Start+0x190>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0c9a      	lsrs	r2, r3, #18
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027d4:	e002      	b.n	80027dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f9      	bne.n	80027d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d17a      	bne.n	80028e6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800281a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d106      	bne.n	800283e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	f023 0206 	bic.w	r2, r3, #6
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	645a      	str	r2, [r3, #68]	; 0x44
 800283c:	e002      	b.n	8002844 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_ADC_Start+0x194>)
 800284e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002858:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2b00      	cmp	r3, #0
 8002864:	d12a      	bne.n	80028bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <HAL_ADC_Start+0x198>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d015      	beq.n	800289c <HAL_ADC_Start+0x11c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a29      	ldr	r2, [pc, #164]	; (800291c <HAL_ADC_Start+0x19c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d105      	bne.n	8002886 <HAL_ADC_Start+0x106>
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_ADC_Start+0x194>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a25      	ldr	r2, [pc, #148]	; (8002920 <HAL_ADC_Start+0x1a0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d136      	bne.n	80028fe <HAL_ADC_Start+0x17e>
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_ADC_Start+0x194>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d130      	bne.n	80028fe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d129      	bne.n	80028fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	e020      	b.n	80028fe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <HAL_ADC_Start+0x198>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d11b      	bne.n	80028fe <HAL_ADC_Start+0x17e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d114      	bne.n	80028fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e00b      	b.n	80028fe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	20000000 	.word	0x20000000
 8002910:	431bde83 	.word	0x431bde83
 8002914:	40012300 	.word	0x40012300
 8002918:	40012000 	.word	0x40012000
 800291c:	40012100 	.word	0x40012100
 8002920:	40012200 	.word	0x40012200

08002924 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002940:	d113      	bne.n	800296a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800294c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002950:	d10b      	bne.n	800296a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e063      	b.n	8002a32 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800296a:	f7ff fe95 	bl	8002698 <HAL_GetTick>
 800296e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002970:	e021      	b.n	80029b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d01d      	beq.n	80029b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_ADC_PollForConversion+0x6c>
 8002980:	f7ff fe8a 	bl	8002698 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d212      	bcs.n	80029b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d00b      	beq.n	80029b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f043 0204 	orr.w	r2, r3, #4
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e03d      	b.n	8002a32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d1d6      	bne.n	8002972 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0212 	mvn.w	r2, #18
 80029cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d123      	bne.n	8002a30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11f      	bne.n	8002a30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x1c>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e113      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x244>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	d925      	bls.n	8002acc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	3b1e      	subs	r3, #30
 8002a96:	2207      	movs	r2, #7
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68d9      	ldr	r1, [r3, #12]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4603      	mov	r3, r0
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4403      	add	r3, r0
 8002abe:	3b1e      	subs	r3, #30
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	e022      	b.n	8002b12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	400a      	ands	r2, r1
 8002aee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4618      	mov	r0, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4403      	add	r3, r0
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d824      	bhi.n	8002b64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b05      	subs	r3, #5
 8002b2c:	221f      	movs	r2, #31
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	400a      	ands	r2, r1
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	3b05      	subs	r3, #5
 8002b56:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34
 8002b62:	e04c      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	d824      	bhi.n	8002bb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b23      	subs	r3, #35	; 0x23
 8002b7e:	221f      	movs	r2, #31
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43da      	mvns	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b23      	subs	r3, #35	; 0x23
 8002ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb4:	e023      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3b41      	subs	r3, #65	; 0x41
 8002bc8:	221f      	movs	r2, #31
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b41      	subs	r3, #65	; 0x41
 8002bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <HAL_ADC_ConfigChannel+0x250>)
 8002c00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a28      	ldr	r2, [pc, #160]	; (8002ca8 <HAL_ADC_ConfigChannel+0x254>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10f      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1d8>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b12      	cmp	r3, #18
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_ADC_ConfigChannel+0x254>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12b      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x23a>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_ADC_ConfigChannel+0x258>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <HAL_ADC_ConfigChannel+0x1f4>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b11      	cmp	r3, #17
 8002c46:	d122      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <HAL_ADC_ConfigChannel+0x258>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d111      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <HAL_ADC_ConfigChannel+0x260>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	0c9a      	lsrs	r2, r3, #18
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c80:	e002      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f9      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	40012000 	.word	0x40012000
 8002cac:	10000012 	.word	0x10000012
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	431bde83 	.word	0x431bde83

08002cb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc0:	4b79      	ldr	r3, [pc, #484]	; (8002ea8 <ADC_Init+0x1f0>)
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	021a      	lsls	r2, r3, #8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	4a58      	ldr	r2, [pc, #352]	; (8002eac <ADC_Init+0x1f4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e00f      	b.n	8002db6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0202 	bic.w	r2, r2, #2
 8002dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7e1b      	ldrb	r3, [r3, #24]
 8002dd0:	005a      	lsls	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	035a      	lsls	r2, r3, #13
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e007      	b.n	8002e2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	051a      	lsls	r2, r3, #20
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6e:	025a      	lsls	r2, r3, #9
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	029a      	lsls	r2, r3, #10
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40012300 	.word	0x40012300
 8002eac:	0f000001 	.word	0x0f000001

08002eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee2:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	60d3      	str	r3, [r2, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <__NVIC_GetPriorityGrouping+0x18>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f003 0307 	and.w	r3, r3, #7
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db0b      	blt.n	8002f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <__NVIC_EnableIRQ+0x38>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2001      	movs	r0, #1
 8002f36:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800301c:	d301      	bcc.n	8003022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301e:	2301      	movs	r3, #1
 8003020:	e00f      	b.n	8003042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <SysTick_Config+0x40>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302a:	210f      	movs	r1, #15
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	f7ff ff8e 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <SysTick_Config+0x40>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <SysTick_Config+0x40>)
 800303c:	2207      	movs	r2, #7
 800303e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010

08003050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff29 	bl	8002eb0 <__NVIC_SetPriorityGrouping>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003078:	f7ff ff3e 	bl	8002ef8 <__NVIC_GetPriorityGrouping>
 800307c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7ff ff8e 	bl	8002fa4 <NVIC_EncodePriority>
 8003088:	4602      	mov	r2, r0
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff5d 	bl	8002f50 <__NVIC_SetPriority>
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff31 	bl	8002f14 <__NVIC_EnableIRQ>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ffa2 	bl	800300c <SysTick_Config>
 80030c8:	4603      	mov	r3, r0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff fada 	bl	8002698 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d008      	beq.n	8003104 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e052      	b.n	80031aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0216 	bic.w	r2, r2, #22
 8003112:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003122:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <HAL_DMA_Abort+0x62>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0208 	bic.w	r2, r2, #8
 8003142:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003154:	e013      	b.n	800317e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003156:	f7ff fa9f 	bl	8002698 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b05      	cmp	r3, #5
 8003162:	d90c      	bls.n	800317e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2203      	movs	r2, #3
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e015      	b.n	80031aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e4      	bne.n	8003156 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	223f      	movs	r2, #63	; 0x3f
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d004      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e00c      	b.n	80031ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2205      	movs	r2, #5
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800320a:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_FLASH_Program+0xa0>)
 800320c:	7e1b      	ldrb	r3, [r3, #24]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_FLASH_Program+0x1e>
 8003212:	2302      	movs	r3, #2
 8003214:	e03b      	b.n	800328e <HAL_FLASH_Program+0x96>
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_FLASH_Program+0xa0>)
 8003218:	2201      	movs	r2, #1
 800321a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800321c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003220:	f000 f870 	bl	8003304 <FLASH_WaitForLastOperation>
 8003224:	4603      	mov	r3, r0
 8003226:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12b      	bne.n	8003286 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003234:	783b      	ldrb	r3, [r7, #0]
 8003236:	4619      	mov	r1, r3
 8003238:	68b8      	ldr	r0, [r7, #8]
 800323a:	f000 f91b 	bl	8003474 <FLASH_Program_Byte>
 800323e:	e016      	b.n	800326e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003246:	883b      	ldrh	r3, [r7, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	68b8      	ldr	r0, [r7, #8]
 800324c:	f000 f8ee 	bl	800342c <FLASH_Program_HalfWord>
 8003250:	e00d      	b.n	800326e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d105      	bne.n	8003264 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	68b8      	ldr	r0, [r7, #8]
 800325e:	f000 f8c3 	bl	80033e8 <FLASH_Program_Word>
 8003262:	e004      	b.n	800326e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003268:	68b8      	ldr	r0, [r7, #8]
 800326a:	f000 f88b 	bl	8003384 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800326e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003272:	f000 f847 	bl	8003304 <FLASH_WaitForLastOperation>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_FLASH_Program+0xa4>)
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_FLASH_Program+0xa4>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <HAL_FLASH_Program+0xa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000330 	.word	0x20000330
 800329c:	40023c00 	.word	0x40023c00

080032a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_FLASH_Unlock+0x38>)
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	da0b      	bge.n	80032ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_FLASH_Unlock+0x38>)
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_FLASH_Unlock+0x3c>)
 80032b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80032b8:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <HAL_FLASH_Unlock+0x38>)
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_FLASH_Unlock+0x40>)
 80032bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_FLASH_Unlock+0x38>)
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da01      	bge.n	80032ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80032ca:	79fb      	ldrb	r3, [r7, #7]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40023c00 	.word	0x40023c00
 80032dc:	45670123 	.word	0x45670123
 80032e0:	cdef89ab 	.word	0xcdef89ab

080032e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_FLASH_Lock+0x1c>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_FLASH_Lock+0x1c>)
 80032ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40023c00 	.word	0x40023c00

08003304 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <FLASH_WaitForLastOperation+0x78>)
 8003312:	2200      	movs	r2, #0
 8003314:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003316:	f7ff f9bf 	bl	8002698 <HAL_GetTick>
 800331a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800331c:	e010      	b.n	8003340 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d00c      	beq.n	8003340 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <FLASH_WaitForLastOperation+0x38>
 800332c:	f7ff f9b4 	bl	8002698 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d201      	bcs.n	8003340 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e019      	b.n	8003374 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <FLASH_WaitForLastOperation+0x7c>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e8      	bne.n	800331e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <FLASH_WaitForLastOperation+0x7c>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <FLASH_WaitForLastOperation+0x7c>)
 800335a:	2201      	movs	r2, #1
 800335c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <FLASH_WaitForLastOperation+0x7c>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800336a:	f000 f8a5 	bl	80034b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
  
}  
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000330 	.word	0x20000330
 8003380:	40023c00 	.word	0x40023c00

08003384 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <FLASH_Program_DoubleWord+0x60>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <FLASH_Program_DoubleWord+0x60>)
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <FLASH_Program_DoubleWord+0x60>)
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <FLASH_Program_DoubleWord+0x60>)
 80033a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80033a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <FLASH_Program_DoubleWord+0x60>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <FLASH_Program_DoubleWord+0x60>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80033ba:	f3bf 8f6f 	isb	sy
}
 80033be:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80033c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	000a      	movs	r2, r1
 80033ce:	2300      	movs	r3, #0
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	3104      	adds	r1, #4
 80033d4:	4613      	mov	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40023c00 	.word	0x40023c00

080033e8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <FLASH_Program_Word+0x40>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	4a0c      	ldr	r2, [pc, #48]	; (8003428 <FLASH_Program_Word+0x40>)
 80033f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <FLASH_Program_Word+0x40>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <FLASH_Program_Word+0x40>)
 8003404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003408:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <FLASH_Program_Word+0x40>)
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	4a06      	ldr	r2, [pc, #24]	; (8003428 <FLASH_Program_Word+0x40>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	601a      	str	r2, [r3, #0]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40023c00 	.word	0x40023c00

0800342c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003438:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <FLASH_Program_HalfWord+0x44>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <FLASH_Program_HalfWord+0x44>)
 800343e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <FLASH_Program_HalfWord+0x44>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	4a09      	ldr	r2, [pc, #36]	; (8003470 <FLASH_Program_HalfWord+0x44>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <FLASH_Program_HalfWord+0x44>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <FLASH_Program_HalfWord+0x44>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	801a      	strh	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00

08003474 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <FLASH_Program_Byte+0x40>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <FLASH_Program_Byte+0x40>)
 8003486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <FLASH_Program_Byte+0x40>)
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <FLASH_Program_Byte+0x40>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <FLASH_Program_Byte+0x40>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4a06      	ldr	r2, [pc, #24]	; (80034b4 <FLASH_Program_Byte+0x40>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	701a      	strb	r2, [r3, #0]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00

080034b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80034bc:	4b2f      	ldr	r3, [pc, #188]	; (800357c <FLASH_SetErrorCode+0xc4>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 80034d2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <FLASH_SetErrorCode+0xc4>)
 80034d6:	2210      	movs	r2, #16
 80034d8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <FLASH_SetErrorCode+0xc4>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f043 0308 	orr.w	r3, r3, #8
 80034ee:	4a24      	ldr	r2, [pc, #144]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 80034f0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <FLASH_SetErrorCode+0xc4>)
 80034f4:	2220      	movs	r2, #32
 80034f6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <FLASH_SetErrorCode+0xc4>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 800350e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <FLASH_SetErrorCode+0xc4>)
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <FLASH_SetErrorCode+0xc4>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f043 0302 	orr.w	r3, r3, #2
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 800352c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <FLASH_SetErrorCode+0xc4>)
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <FLASH_SetErrorCode+0xc4>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 800354a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <FLASH_SetErrorCode+0xc4>)
 800354e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003552:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <FLASH_SetErrorCode+0xc4>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f043 0320 	orr.w	r3, r3, #32
 8003568:	4a05      	ldr	r2, [pc, #20]	; (8003580 <FLASH_SetErrorCode+0xc8>)
 800356a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <FLASH_SetErrorCode+0xc4>)
 800356e:	2202      	movs	r2, #2
 8003570:	60da      	str	r2, [r3, #12]
  }
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40023c00 	.word	0x40023c00
 8003580:	20000330 	.word	0x20000330

08003584 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_FLASHEx_Erase+0xdc>)
 8003598:	7e1b      	ldrb	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_FLASHEx_Erase+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e05a      	b.n	8003658 <HAL_FLASHEx_Erase+0xd4>
 80035a2:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_FLASHEx_Erase+0xdc>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035ac:	f7ff feaa 	bl	8003304 <FLASH_WaitForLastOperation>
 80035b0:	4603      	mov	r3, r0
 80035b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d14a      	bne.n	8003650 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d117      	bne.n	80035fa <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 f846 	bl	8003668 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035e0:	f7ff fe90 	bl	8003304 <FLASH_WaitForLastOperation>
 80035e4:	4603      	mov	r3, r0
 80035e6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <HAL_FLASHEx_Erase+0xe0>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_FLASHEx_Erase+0xe0>)
 80035ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035f2:	f023 0304 	bic.w	r3, r3, #4
 80035f6:	6113      	str	r3, [r2, #16]
 80035f8:	e028      	b.n	800364c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	e01c      	b.n	800363c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	68b8      	ldr	r0, [r7, #8]
 800360c:	f000 f866 	bl	80036dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003610:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003614:	f7ff fe76 	bl	8003304 <FLASH_WaitForLastOperation>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_FLASHEx_Erase+0xe0>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4a10      	ldr	r2, [pc, #64]	; (8003664 <HAL_FLASHEx_Erase+0xe0>)
 8003622:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003626:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	601a      	str	r2, [r3, #0]
          break;
 8003634:	e00a      	b.n	800364c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4413      	add	r3, r2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	429a      	cmp	r2, r3
 800364a:	d3da      	bcc.n	8003602 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800364c:	f000 f894 	bl	8003778 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_FLASHEx_Erase+0xdc>)
 8003652:	2200      	movs	r2, #0
 8003654:	761a      	strb	r2, [r3, #24]

  return status;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000330 	.word	0x20000330
 8003664:	40023c00 	.word	0x40023c00

08003668 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <FLASH_MassErase+0x70>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <FLASH_MassErase+0x70>)
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d108      	bne.n	8003698 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <FLASH_MassErase+0x70>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <FLASH_MassErase+0x70>)
 800368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6113      	str	r3, [r2, #16]
 8003696:	e00f      	b.n	80036b8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d106      	bne.n	80036ac <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <FLASH_MassErase+0x70>)
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <FLASH_MassErase+0x70>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6113      	str	r3, [r2, #16]
 80036aa:	e005      	b.n	80036b8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <FLASH_MassErase+0x70>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <FLASH_MassErase+0x70>)
 80036b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <FLASH_MassErase+0x70>)
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	4313      	orrs	r3, r2
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <FLASH_MassErase+0x70>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6113      	str	r3, [r2, #16]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00

080036dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e010      	b.n	800371a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d103      	bne.n	8003706 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80036fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e009      	b.n	800371a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d103      	bne.n	8003714 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800370c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e002      	b.n	800371a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003718:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b0b      	cmp	r3, #11
 800371e:	d902      	bls.n	8003726 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <FLASH_Erase_Sector+0x98>)
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <FLASH_Erase_Sector+0x98>)
 800372c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003730:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <FLASH_Erase_Sector+0x98>)
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	490f      	ldr	r1, [pc, #60]	; (8003774 <FLASH_Erase_Sector+0x98>)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <FLASH_Erase_Sector+0x98>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	4a0c      	ldr	r2, [pc, #48]	; (8003774 <FLASH_Erase_Sector+0x98>)
 8003744:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003748:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <FLASH_Erase_Sector+0x98>)
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4313      	orrs	r3, r2
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <FLASH_Erase_Sector+0x98>)
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <FLASH_Erase_Sector+0x98>)
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <FLASH_Erase_Sector+0x98>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003766:	6113      	str	r3, [r2, #16]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40023c00 	.word	0x40023c00

08003778 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <FLASH_FlushCaches+0x88>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003784:	2b00      	cmp	r3, #0
 8003786:	d017      	beq.n	80037b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <FLASH_FlushCaches+0x88>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <FLASH_FlushCaches+0x88>)
 800378e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003792:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <FLASH_FlushCaches+0x88>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a19      	ldr	r2, [pc, #100]	; (8003800 <FLASH_FlushCaches+0x88>)
 800379a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a16      	ldr	r2, [pc, #88]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a07      	ldr	r2, [pc, #28]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <FLASH_FlushCaches+0x88>)
 80037ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037f2:	6013      	str	r3, [r2, #0]
  }
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00

08003804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e177      	b.n	8003b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	f040 8166 	bne.w	8003b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d005      	beq.n	8003856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003852:	2b02      	cmp	r3, #2
 8003854:	d130      	bne.n	80038b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2203      	movs	r2, #3
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800388c:	2201      	movs	r2, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 0201 	and.w	r2, r3, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d017      	beq.n	80038f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d123      	bne.n	8003948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	08da      	lsrs	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3208      	adds	r2, #8
 8003908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0203 	and.w	r2, r3, #3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80c0 	beq.w	8003b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003998:	6453      	str	r3, [r2, #68]	; 0x44
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_GPIO_Init+0x324>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a6:	4a61      	ldr	r2, [pc, #388]	; (8003b2c <HAL_GPIO_Init+0x328>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_GPIO_Init+0x32c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d037      	beq.n	8003a42 <HAL_GPIO_Init+0x23e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a57      	ldr	r2, [pc, #348]	; (8003b34 <HAL_GPIO_Init+0x330>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_GPIO_Init+0x23a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <HAL_GPIO_Init+0x334>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02b      	beq.n	8003a3a <HAL_GPIO_Init+0x236>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a55      	ldr	r2, [pc, #340]	; (8003b3c <HAL_GPIO_Init+0x338>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d025      	beq.n	8003a36 <HAL_GPIO_Init+0x232>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a54      	ldr	r2, [pc, #336]	; (8003b40 <HAL_GPIO_Init+0x33c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <HAL_GPIO_Init+0x22e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a53      	ldr	r2, [pc, #332]	; (8003b44 <HAL_GPIO_Init+0x340>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x22a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_GPIO_Init+0x344>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x226>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a51      	ldr	r2, [pc, #324]	; (8003b4c <HAL_GPIO_Init+0x348>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x222>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <HAL_GPIO_Init+0x34c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x21e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4f      	ldr	r2, [pc, #316]	; (8003b54 <HAL_GPIO_Init+0x350>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x21a>
 8003a1a:	2309      	movs	r3, #9
 8003a1c:	e012      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a1e:	230a      	movs	r3, #10
 8003a20:	e010      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a22:	2308      	movs	r3, #8
 8003a24:	e00e      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00c      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	e00a      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a2e:	2305      	movs	r3, #5
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a32:	2304      	movs	r3, #4
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a42:	2300      	movs	r3, #0
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a54:	4935      	ldr	r1, [pc, #212]	; (8003b2c <HAL_GPIO_Init+0x328>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a62:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a86:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ab6:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ada:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	f67f ae84 	bls.w	8003820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40013800 	.word	0x40013800
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40021400 	.word	0x40021400
 8003b48:	40021800 	.word	0x40021800
 8003b4c:	40021c00 	.word	0x40021c00
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40022400 	.word	0x40022400
 8003b58:	40013c00 	.word	0x40013c00

08003b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e001      	b.n	8003b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b9c:	787b      	ldrb	r3, [r7, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ba8:	e003      	b.n	8003bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	041a      	lsls	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	619a      	str	r2, [r3, #24]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd ff86 	bl	8001af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e12b      	b.n	8003e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc feaa 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c54:	f001 fa80 	bl	8005158 <HAL_RCC_GetPCLK1Freq>
 8003c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4a81      	ldr	r2, [pc, #516]	; (8003e64 <HAL_I2C_Init+0x274>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d807      	bhi.n	8003c74 <HAL_I2C_Init+0x84>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a80      	ldr	r2, [pc, #512]	; (8003e68 <HAL_I2C_Init+0x278>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e006      	b.n	8003c82 <HAL_I2C_Init+0x92>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a7d      	ldr	r2, [pc, #500]	; (8003e6c <HAL_I2C_Init+0x27c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e0e7      	b.n	8003e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a78      	ldr	r2, [pc, #480]	; (8003e70 <HAL_I2C_Init+0x280>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	0c9b      	lsrs	r3, r3, #18
 8003c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a6a      	ldr	r2, [pc, #424]	; (8003e64 <HAL_I2C_Init+0x274>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d802      	bhi.n	8003cc4 <HAL_I2C_Init+0xd4>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	e009      	b.n	8003cd8 <HAL_I2C_Init+0xe8>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	4a69      	ldr	r2, [pc, #420]	; (8003e74 <HAL_I2C_Init+0x284>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	495c      	ldr	r1, [pc, #368]	; (8003e64 <HAL_I2C_Init+0x274>)
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	d819      	bhi.n	8003d2c <HAL_I2C_Init+0x13c>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e59      	subs	r1, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d0c:	400b      	ands	r3, r1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_I2C_Init+0x138>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1e59      	subs	r1, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d20:	3301      	adds	r3, #1
 8003d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d26:	e051      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	e04f      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d111      	bne.n	8003d58 <HAL_I2C_Init+0x168>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	440b      	add	r3, r1
 8003d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d46:	3301      	adds	r3, #1
 8003d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e012      	b.n	8003d7e <HAL_I2C_Init+0x18e>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	0099      	lsls	r1, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Init+0x196>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e022      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10e      	bne.n	8003dac <HAL_I2C_Init+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1e58      	subs	r0, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	440b      	add	r3, r1
 8003d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003daa:	e00f      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e58      	subs	r0, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	0099      	lsls	r1, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	6809      	ldr	r1, [r1, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6911      	ldr	r1, [r2, #16]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	000186a0 	.word	0x000186a0
 8003e68:	001e847f 	.word	0x001e847f
 8003e6c:	003d08ff 	.word	0x003d08ff
 8003e70:	431bde83 	.word	0x431bde83
 8003e74:	10624dd3 	.word	0x10624dd3

08003e78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	461a      	mov	r2, r3
 8003e84:	460b      	mov	r3, r1
 8003e86:	817b      	strh	r3, [r7, #10]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e8c:	f7fe fc04 	bl	8002698 <HAL_GetTick>
 8003e90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	f040 80e0 	bne.w	8004060 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2319      	movs	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4970      	ldr	r1, [pc, #448]	; (800406c <HAL_I2C_Master_Transmit+0x1f4>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa92 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e0d3      	b.n	8004062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2C_Master_Transmit+0x50>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0cc      	b.n	8004062 <HAL_I2C_Master_Transmit+0x1ea>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d007      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2221      	movs	r2, #33	; 0x21
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2210      	movs	r2, #16
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	893a      	ldrh	r2, [r7, #8]
 8003f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a50      	ldr	r2, [pc, #320]	; (8004070 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f30:	8979      	ldrh	r1, [r7, #10]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9ca 	bl	80042d0 <I2C_MasterRequestWrite>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e08d      	b.n	8004062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f5c:	e066      	b.n	800402c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	6a39      	ldr	r1, [r7, #32]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fb0c 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d107      	bne.n	8003f86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06b      	b.n	8004062 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d11b      	bne.n	8004000 <HAL_I2C_Master_Transmit+0x188>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d017      	beq.n	8004000 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	6a39      	ldr	r1, [r7, #32]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fafc 	bl	8004602 <I2C_WaitOnBTFFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	2b04      	cmp	r3, #4
 8004016:	d107      	bne.n	8004028 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e01a      	b.n	8004062 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	d194      	bne.n	8003f5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	00100002 	.word	0x00100002
 8004070:	ffff0000 	.word	0xffff0000

08004074 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	460b      	mov	r3, r1
 8004082:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004084:	f7fe fb08 	bl	8002698 <HAL_GetTick>
 8004088:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 8111 	bne.w	80042be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2319      	movs	r3, #25
 80040a2:	2201      	movs	r2, #1
 80040a4:	4988      	ldr	r1, [pc, #544]	; (80042c8 <HAL_I2C_IsDeviceReady+0x254>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f994 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
 80040b4:	e104      	b.n	80042c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_I2C_IsDeviceReady+0x50>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0fd      	b.n	80042c0 <HAL_I2C_IsDeviceReady+0x24c>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d007      	beq.n	80040ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2224      	movs	r2, #36	; 0x24
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a70      	ldr	r2, [pc, #448]	; (80042cc <HAL_I2C_IsDeviceReady+0x258>)
 800410c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2200      	movs	r2, #0
 8004126:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f952 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004144:	d103      	bne.n	800414e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0b6      	b.n	80042c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004152:	897b      	ldrh	r3, [r7, #10]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004160:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004162:	f7fe fa99 	bl	8002698 <HAL_GetTick>
 8004166:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004196:	e025      	b.n	80041e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004198:	f7fe fa7e 	bl	8002698 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d302      	bcc.n	80041ae <HAL_I2C_IsDeviceReady+0x13a>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	22a0      	movs	r2, #160	; 0xa0
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2ba0      	cmp	r3, #160	; 0xa0
 80041ee:	d005      	beq.n	80041fc <HAL_I2C_IsDeviceReady+0x188>
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_I2C_IsDeviceReady+0x188>
 80041f6:	7dbb      	ldrb	r3, [r7, #22]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0cd      	beq.n	8004198 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b02      	cmp	r3, #2
 8004210:	d129      	bne.n	8004266 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004220:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2319      	movs	r3, #25
 800423e:	2201      	movs	r2, #1
 8004240:	4921      	ldr	r1, [pc, #132]	; (80042c8 <HAL_I2C_IsDeviceReady+0x254>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f8c6 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e036      	b.n	80042c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e02c      	b.n	80042c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004274:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800427e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2319      	movs	r3, #25
 8004286:	2201      	movs	r2, #1
 8004288:	490f      	ldr	r1, [pc, #60]	; (80042c8 <HAL_I2C_IsDeviceReady+0x254>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f8a2 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e012      	b.n	80042c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	3301      	adds	r3, #1
 800429e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	f4ff af32 	bcc.w	800410e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042be:	2302      	movs	r3, #2
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	00100002 	.word	0x00100002
 80042cc:	ffff0000 	.word	0xffff0000

080042d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	460b      	mov	r3, r1
 80042de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d006      	beq.n	80042fa <I2C_MasterRequestWrite+0x2a>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d003      	beq.n	80042fa <I2C_MasterRequestWrite+0x2a>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042f8:	d108      	bne.n	800430c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e00b      	b.n	8004324 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	2b12      	cmp	r3, #18
 8004312:	d107      	bne.n	8004324 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f84f 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434a:	d103      	bne.n	8004354 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e035      	b.n	80043c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004360:	d108      	bne.n	8004374 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004362:	897b      	ldrh	r3, [r7, #10]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004370:	611a      	str	r2, [r3, #16]
 8004372:	e01b      	b.n	80043ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004374:	897b      	ldrh	r3, [r7, #10]
 8004376:	11db      	asrs	r3, r3, #7
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0306 	and.w	r3, r3, #6
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f063 030f 	orn	r3, r3, #15
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	490e      	ldr	r1, [pc, #56]	; (80043cc <I2C_MasterRequestWrite+0xfc>)
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f875 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e010      	b.n	80043c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043a2:	897b      	ldrh	r3, [r7, #10]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <I2C_MasterRequestWrite+0x100>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f865 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	00010008 	.word	0x00010008
 80043d0:	00010002 	.word	0x00010002

080043d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e4:	e025      	b.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d021      	beq.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fe f953 	bl	8002698 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d116      	bne.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e023      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10d      	bne.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x84>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	e00c      	b.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0b6      	beq.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004490:	e051      	b.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a0:	d123      	bne.n	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e046      	b.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d021      	beq.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fe f8d1 	bl	8002698 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e020      	b.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10c      	bne.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e00b      	b.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	43da      	mvns	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d18d      	bne.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800458c:	e02d      	b.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f878 	bl	8004684 <I2C_IsAcknowledgeFailed>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e02d      	b.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d021      	beq.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fe f877 	bl	8002698 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d116      	bne.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d1ca      	bne.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460e:	e02d      	b.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f837 	bl	8004684 <I2C_IsAcknowledgeFailed>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e02d      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d021      	beq.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004628:	f7fe f836 	bl	8002698 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d302      	bcc.n	800463e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e007      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d1ca      	bne.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469a:	d11b      	bne.n	80046d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f043 0204 	orr.w	r2, r3, #4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d129      	bne.n	800474c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	; 0x24
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0210 	bic.w	r2, r2, #16
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	d12a      	bne.n	80047ca <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2224      	movs	r2, #36	; 0x24
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	f023 030f 	bic.w	r3, r3, #15
 800479a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	89fa      	ldrh	r2, [r7, #14]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047e2:	2300      	movs	r3, #0
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_PWREx_EnableOverDrive+0x90>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_PWREx_EnableOverDrive+0x90>)
 80047ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f0:	6413      	str	r3, [r2, #64]	; 0x40
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_PWREx_EnableOverDrive+0x90>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047fe:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_PWREx_EnableOverDrive+0x94>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004804:	f7fd ff48 	bl	8002698 <HAL_GetTick>
 8004808:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800480a:	e009      	b.n	8004820 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800480c:	f7fd ff44 	bl	8002698 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800481a:	d901      	bls.n	8004820 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e01f      	b.n	8004860 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004820:	4b13      	ldr	r3, [pc, #76]	; (8004870 <HAL_PWREx_EnableOverDrive+0x98>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d1ee      	bne.n	800480c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004834:	f7fd ff30 	bl	8002698 <HAL_GetTick>
 8004838:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800483a:	e009      	b.n	8004850 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800483c:	f7fd ff2c 	bl	8002698 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484a:	d901      	bls.n	8004850 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e007      	b.n	8004860 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <HAL_PWREx_EnableOverDrive+0x98>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800485c:	d1ee      	bne.n	800483c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	420e0040 	.word	0x420e0040
 8004870:	40007000 	.word	0x40007000
 8004874:	420e0044 	.word	0x420e0044

08004878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e267      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d075      	beq.n	8004982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004896:	4b88      	ldr	r3, [pc, #544]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d00c      	beq.n	80048bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a2:	4b85      	ldr	r3, [pc, #532]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d112      	bne.n	80048d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ae:	4b82      	ldr	r3, [pc, #520]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ba:	d10b      	bne.n	80048d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	4b7e      	ldr	r3, [pc, #504]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d05b      	beq.n	8004980 <HAL_RCC_OscConfig+0x108>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d157      	bne.n	8004980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e242      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d106      	bne.n	80048ec <HAL_RCC_OscConfig+0x74>
 80048de:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a75      	ldr	r2, [pc, #468]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e01d      	b.n	8004928 <HAL_RCC_OscConfig+0xb0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x98>
 80048f6:	4b70      	ldr	r3, [pc, #448]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a6f      	ldr	r2, [pc, #444]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80048fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b6d      	ldr	r3, [pc, #436]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a6c      	ldr	r2, [pc, #432]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e00b      	b.n	8004928 <HAL_RCC_OscConfig+0xb0>
 8004910:	4b69      	ldr	r3, [pc, #420]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a68      	ldr	r2, [pc, #416]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b66      	ldr	r3, [pc, #408]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a65      	ldr	r2, [pc, #404]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fd feb2 	bl	8002698 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004938:	f7fd feae 	bl	8002698 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e207      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	4b5b      	ldr	r3, [pc, #364]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0xc0>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fd fe9e 	bl	8002698 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004960:	f7fd fe9a 	bl	8002698 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1f3      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	4b51      	ldr	r3, [pc, #324]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0xe8>
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d063      	beq.n	8004a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498e:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499a:	4b47      	ldr	r3, [pc, #284]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d11c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a6:	4b44      	ldr	r3, [pc, #272]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d116      	bne.n	80049e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_RCC_OscConfig+0x152>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d001      	beq.n	80049ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e1c7      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ca:	4b3b      	ldr	r3, [pc, #236]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4937      	ldr	r1, [pc, #220]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049de:	e03a      	b.n	8004a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e8:	4b34      	ldr	r3, [pc, #208]	; (8004abc <HAL_RCC_OscConfig+0x244>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fd fe53 	bl	8002698 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f6:	f7fd fe4f 	bl	8002698 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e1a8      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a14:	4b28      	ldr	r3, [pc, #160]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4925      	ldr	r1, [pc, #148]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	600b      	str	r3, [r1, #0]
 8004a28:	e015      	b.n	8004a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_RCC_OscConfig+0x244>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fd fe32 	bl	8002698 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fd fe2e 	bl	8002698 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e187      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d036      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <HAL_RCC_OscConfig+0x248>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a70:	f7fd fe12 	bl	8002698 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a78:	f7fd fe0e 	bl	8002698 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e167      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x200>
 8004a96:	e01b      	b.n	8004ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <HAL_RCC_OscConfig+0x248>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9e:	f7fd fdfb 	bl	8002698 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa4:	e00e      	b.n	8004ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa6:	f7fd fdf7 	bl	8002698 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d907      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e150      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	42470000 	.word	0x42470000
 8004ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	4b88      	ldr	r3, [pc, #544]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ea      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8097 	beq.w	8004c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae2:	4b81      	ldr	r3, [pc, #516]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	4b7d      	ldr	r3, [pc, #500]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	4a7c      	ldr	r2, [pc, #496]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afc:	6413      	str	r3, [r2, #64]	; 0x40
 8004afe:	4b7a      	ldr	r3, [pc, #488]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0e:	4b77      	ldr	r3, [pc, #476]	; (8004cec <HAL_RCC_OscConfig+0x474>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d118      	bne.n	8004b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1a:	4b74      	ldr	r3, [pc, #464]	; (8004cec <HAL_RCC_OscConfig+0x474>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a73      	ldr	r2, [pc, #460]	; (8004cec <HAL_RCC_OscConfig+0x474>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b26:	f7fd fdb7 	bl	8002698 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2e:	f7fd fdb3 	bl	8002698 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e10c      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	4b6a      	ldr	r3, [pc, #424]	; (8004cec <HAL_RCC_OscConfig+0x474>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x2ea>
 8004b54:	4b64      	ldr	r3, [pc, #400]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	4a63      	ldr	r2, [pc, #396]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b60:	e01c      	b.n	8004b9c <HAL_RCC_OscConfig+0x324>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x30c>
 8004b6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a5e      	ldr	r2, [pc, #376]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b70:	f043 0304 	orr.w	r3, r3, #4
 8004b74:	6713      	str	r3, [r2, #112]	; 0x70
 8004b76:	4b5c      	ldr	r3, [pc, #368]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a5b      	ldr	r2, [pc, #364]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
 8004b82:	e00b      	b.n	8004b9c <HAL_RCC_OscConfig+0x324>
 8004b84:	4b58      	ldr	r3, [pc, #352]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	4a57      	ldr	r2, [pc, #348]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b90:	4b55      	ldr	r3, [pc, #340]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a54      	ldr	r2, [pc, #336]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f023 0304 	bic.w	r3, r3, #4
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fd fd78 	bl	8002698 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bac:	f7fd fd74 	bl	8002698 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e0cb      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc2:	4b49      	ldr	r3, [pc, #292]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0ee      	beq.n	8004bac <HAL_RCC_OscConfig+0x334>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd0:	f7fd fd62 	bl	8002698 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd8:	f7fd fd5e 	bl	8002698 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e0b5      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bee:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1ee      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c00:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	4a38      	ldr	r2, [pc, #224]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80a1 	beq.w	8004d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c16:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d05c      	beq.n	8004cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d141      	bne.n	8004cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2a:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <HAL_RCC_OscConfig+0x478>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fd fd32 	bl	8002698 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fd fd2e 	bl	8002698 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e087      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	019b      	lsls	r3, r3, #6
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	491b      	ldr	r1, [pc, #108]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c80:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x478>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fd fd07 	bl	8002698 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8e:	f7fd fd03 	bl	8002698 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e05c      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x416>
 8004cac:	e054      	b.n	8004d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <HAL_RCC_OscConfig+0x478>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fd fcf0 	bl	8002698 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fd fcec 	bl	8002698 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e045      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x444>
 8004cda:	e03d      	b.n	8004d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e038      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_RCC_OscConfig+0x4ec>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d028      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d121      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d11a      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d111      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800

08004d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0cc      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b68      	ldr	r3, [pc, #416]	; (8004f20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d90c      	bls.n	8004da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b65      	ldr	r3, [pc, #404]	; (8004f20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d92:	4b63      	ldr	r3, [pc, #396]	; (8004f20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0b8      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d020      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dbc:	4b59      	ldr	r3, [pc, #356]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4a58      	ldr	r2, [pc, #352]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd4:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a52      	ldr	r2, [pc, #328]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de0:	4b50      	ldr	r3, [pc, #320]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	494d      	ldr	r1, [pc, #308]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d044      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d107      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d119      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e07f      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d003      	beq.n	8004e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e26:	4b3f      	ldr	r3, [pc, #252]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e06f      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e36:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e067      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e46:	4b37      	ldr	r3, [pc, #220]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f023 0203 	bic.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4934      	ldr	r1, [pc, #208]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e58:	f7fd fc1e 	bl	8002698 <HAL_GetTick>
 8004e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e60:	f7fd fc1a 	bl	8002698 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e04f      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e76:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 020c 	and.w	r2, r3, #12
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d1eb      	bne.n	8004e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d20c      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <HAL_RCC_ClockConfig+0x1b8>)
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e032      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ebc:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4916      	ldr	r1, [pc, #88]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	490e      	ldr	r1, [pc, #56]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eee:	f000 f821 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	490a      	ldr	r1, [pc, #40]	; (8004f28 <HAL_RCC_ClockConfig+0x1c0>)
 8004f00:	5ccb      	ldrb	r3, [r1, r3]
 8004f02:	fa22 f303 	lsr.w	r3, r2, r3
 8004f06:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd fb7e 	bl	8002610 <HAL_InitTick>

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40023c00 	.word	0x40023c00
 8004f24:	40023800 	.word	0x40023800
 8004f28:	080081d4 	.word	0x080081d4
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	20000004 	.word	0x20000004

08004f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f38:	b094      	sub	sp, #80	; 0x50
 8004f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f40:	2300      	movs	r3, #0
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	2300      	movs	r3, #0
 8004f46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f4c:	4b79      	ldr	r3, [pc, #484]	; (8005134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 030c 	and.w	r3, r3, #12
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d00d      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x40>
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	f200 80e1 	bhi.w	8005120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0x34>
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d003      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f66:	e0db      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f68:	4b73      	ldr	r3, [pc, #460]	; (8005138 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f6c:	e0db      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f6e:	4b73      	ldr	r3, [pc, #460]	; (800513c <HAL_RCC_GetSysClockFreq+0x208>)
 8004f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f72:	e0d8      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f74:	4b6f      	ldr	r3, [pc, #444]	; (8005134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f7e:	4b6d      	ldr	r3, [pc, #436]	; (8005134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d063      	beq.n	8005052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8a:	4b6a      	ldr	r3, [pc, #424]	; (8005134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	2200      	movs	r2, #0
 8004f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	462b      	mov	r3, r5
 8004faa:	f04f 0000 	mov.w	r0, #0
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	0159      	lsls	r1, r3, #5
 8004fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb8:	0150      	lsls	r0, r2, #5
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	1a51      	subs	r1, r2, r1
 8004fc2:	6139      	str	r1, [r7, #16]
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd8:	4659      	mov	r1, fp
 8004fda:	018b      	lsls	r3, r1, #6
 8004fdc:	4651      	mov	r1, sl
 8004fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fe2:	4651      	mov	r1, sl
 8004fe4:	018a      	lsls	r2, r1, #6
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8004fec:	4659      	mov	r1, fp
 8004fee:	eb63 0901 	sbc.w	r9, r3, r1
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005006:	4690      	mov	r8, r2
 8005008:	4699      	mov	r9, r3
 800500a:	4623      	mov	r3, r4
 800500c:	eb18 0303 	adds.w	r3, r8, r3
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	462b      	mov	r3, r5
 8005014:	eb49 0303 	adc.w	r3, r9, r3
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005026:	4629      	mov	r1, r5
 8005028:	024b      	lsls	r3, r1, #9
 800502a:	4621      	mov	r1, r4
 800502c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005030:	4621      	mov	r1, r4
 8005032:	024a      	lsls	r2, r1, #9
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503a:	2200      	movs	r2, #0
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
 800503e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005044:	f7fb f92c 	bl	80002a0 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4613      	mov	r3, r2
 800504e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005050:	e058      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <HAL_RCC_GetSysClockFreq+0x200>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	2200      	movs	r2, #0
 800505a:	4618      	mov	r0, r3
 800505c:	4611      	mov	r1, r2
 800505e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005062:	623b      	str	r3, [r7, #32]
 8005064:	2300      	movs	r3, #0
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
 8005068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	f04f 0000 	mov.w	r0, #0
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	0159      	lsls	r1, r3, #5
 800507a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800507e:	0150      	lsls	r0, r2, #5
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4641      	mov	r1, r8
 8005086:	ebb2 0a01 	subs.w	sl, r2, r1
 800508a:	4649      	mov	r1, r9
 800508c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800509c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050a4:	ebb2 040a 	subs.w	r4, r2, sl
 80050a8:	eb63 050b 	sbc.w	r5, r3, fp
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	00eb      	lsls	r3, r5, #3
 80050b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ba:	00e2      	lsls	r2, r4, #3
 80050bc:	4614      	mov	r4, r2
 80050be:	461d      	mov	r5, r3
 80050c0:	4643      	mov	r3, r8
 80050c2:	18e3      	adds	r3, r4, r3
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	464b      	mov	r3, r9
 80050c8:	eb45 0303 	adc.w	r3, r5, r3
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050da:	4629      	mov	r1, r5
 80050dc:	028b      	lsls	r3, r1, #10
 80050de:	4621      	mov	r1, r4
 80050e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050e4:	4621      	mov	r1, r4
 80050e6:	028a      	lsls	r2, r1, #10
 80050e8:	4610      	mov	r0, r2
 80050ea:	4619      	mov	r1, r3
 80050ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ee:	2200      	movs	r2, #0
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	61fa      	str	r2, [r7, #28]
 80050f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050f8:	f7fb f8d2 	bl	80002a0 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4613      	mov	r3, r2
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <HAL_RCC_GetSysClockFreq+0x200>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	3301      	adds	r3, #1
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800511e:	e002      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_RCC_GetSysClockFreq+0x204>)
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005128:	4618      	mov	r0, r3
 800512a:	3750      	adds	r7, #80	; 0x50
 800512c:	46bd      	mov	sp, r7
 800512e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005132:	bf00      	nop
 8005134:	40023800 	.word	0x40023800
 8005138:	00f42400 	.word	0x00f42400
 800513c:	007a1200 	.word	0x007a1200

08005140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <HAL_RCC_GetHCLKFreq+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000000 	.word	0x20000000

08005158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800515c:	f7ff fff0 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	0a9b      	lsrs	r3, r3, #10
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4903      	ldr	r1, [pc, #12]	; (800517c <HAL_RCC_GetPCLK1Freq+0x24>)
 800516e:	5ccb      	ldrb	r3, [r1, r3]
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40023800 	.word	0x40023800
 800517c:	080081e4 	.word	0x080081e4

08005180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005184:	f7ff ffdc 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0b5b      	lsrs	r3, r3, #13
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	080081e4 	.word	0x080081e4

080051a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d075      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051dc:	4b91      	ldr	r3, [pc, #580]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e2:	f7fd fa59 	bl	8002698 <HAL_GetTick>
 80051e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051e8:	e008      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ea:	f7fd fa55 	bl	8002698 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e189      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051fc:	4b8a      	ldr	r3, [pc, #552]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f0      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	019a      	lsls	r2, r3, #6
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	071b      	lsls	r3, r3, #28
 8005220:	4981      	ldr	r1, [pc, #516]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01f      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005234:	4b7c      	ldr	r3, [pc, #496]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523a:	0f1b      	lsrs	r3, r3, #28
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	019a      	lsls	r2, r3, #6
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	431a      	orrs	r2, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	071b      	lsls	r3, r3, #28
 8005254:	4974      	ldr	r1, [pc, #464]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800525c:	4b72      	ldr	r3, [pc, #456]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005262:	f023 021f 	bic.w	r2, r3, #31
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	3b01      	subs	r3, #1
 800526c:	496e      	ldr	r1, [pc, #440]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	019a      	lsls	r2, r3, #6
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	061b      	lsls	r3, r3, #24
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	071b      	lsls	r3, r3, #28
 8005294:	4964      	ldr	r1, [pc, #400]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800529c:	4b61      	ldr	r3, [pc, #388]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052a2:	f7fd f9f9 	bl	8002698 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052aa:	f7fd f9f5 	bl	8002698 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e129      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052bc:	4b5a      	ldr	r3, [pc, #360]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d079      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052e0:	4b52      	ldr	r3, [pc, #328]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052e6:	f7fd f9d7 	bl	8002698 <HAL_GetTick>
 80052ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052ec:	e008      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052ee:	f7fd f9d3 	bl	8002698 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e107      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005300:	4b49      	ldr	r3, [pc, #292]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800530c:	d0ef      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	d020      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800531a:	4b43      	ldr	r3, [pc, #268]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	0f1b      	lsrs	r3, r3, #28
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	019a      	lsls	r2, r3, #6
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	431a      	orrs	r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	071b      	lsls	r3, r3, #28
 800533a:	493b      	ldr	r1, [pc, #236]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005342:	4b39      	ldr	r3, [pc, #228]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	3b01      	subs	r3, #1
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4934      	ldr	r1, [pc, #208]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01e      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005368:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	0e1b      	lsrs	r3, r3, #24
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	019a      	lsls	r2, r3, #6
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	071b      	lsls	r3, r3, #28
 8005388:	4927      	ldr	r1, [pc, #156]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	4922      	ldr	r1, [pc, #136]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ac:	f7fd f974 	bl	8002698 <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053b4:	f7fd f970 	bl	8002698 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0a4      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d2:	d1ef      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 808b 	beq.w	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6413      	str	r3, [r2, #64]	; 0x40
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053fe:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005408:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800540a:	f7fd f945 	bl	8002698 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005410:	e010      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005412:	f7fd f941 	bl	8002698 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d909      	bls.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e075      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005424:	42470068 	.word	0x42470068
 8005428:	40023800 	.word	0x40023800
 800542c:	42470070 	.word	0x42470070
 8005430:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005434:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0e8      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005448:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02f      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d028      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005466:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005468:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005474:	4a29      	ldr	r2, [pc, #164]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800547a:	4b28      	ldr	r3, [pc, #160]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b01      	cmp	r3, #1
 8005484:	d114      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005486:	f7fd f907 	bl	8002698 <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548c:	e00a      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800548e:	f7fd f903 	bl	8002698 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	; 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e035      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a4:	4b1d      	ldr	r3, [pc, #116]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0ee      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054bc:	d10d      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x332>
 80054be:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	4912      	ldr	r1, [pc, #72]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]
 80054d8:	e005      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80054da:	4b10      	ldr	r3, [pc, #64]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4a0f      	ldr	r2, [pc, #60]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054e4:	6093      	str	r3, [r2, #8]
 80054e6:	4b0d      	ldr	r3, [pc, #52]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f2:	490a      	ldr	r1, [pc, #40]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800550a:	4b06      	ldr	r3, [pc, #24]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800550c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40007000 	.word	0x40007000
 800551c:	40023800 	.word	0x40023800
 8005520:	42470e40 	.word	0x42470e40
 8005524:	424711e0 	.word	0x424711e0

08005528 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e066      	b.n	800560c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7f5b      	ldrb	r3, [r3, #29]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fc fcb2 	bl	8001eb8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	22ca      	movs	r2, #202	; 0xca
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2253      	movs	r2, #83	; 0x53
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f87a 	bl	8005664 <RTC_EnterInitMode>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d12c      	bne.n	80055d4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68d2      	ldr	r2, [r2, #12]
 80055b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6919      	ldr	r1, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	041a      	lsls	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f881 	bl	80056d2 <RTC_ExitInitMode>
 80055d0:	4603      	mov	r3, r0
 80055d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d113      	bne.n	8005602 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	22ff      	movs	r2, #255	; 0xff
 8005608:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800562e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005630:	f7fd f832 	bl	8002698 <HAL_GetTick>
 8005634:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005636:	e009      	b.n	800564c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005638:	f7fd f82e 	bl	8002698 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005646:	d901      	bls.n	800564c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e007      	b.n	800565c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0ee      	beq.n	8005638 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d122      	bne.n	80056c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005690:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005692:	f7fd f801 	bl	8002698 <HAL_GetTick>
 8005696:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005698:	e00c      	b.n	80056b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800569a:	f7fc fffd 	bl	8002698 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056a8:	d904      	bls.n	80056b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2204      	movs	r2, #4
 80056ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <RTC_EnterInitMode+0x64>
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d1e8      	bne.n	800569a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff89 	bl	8005614 <HAL_RTC_WaitForSynchro>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2204      	movs	r2, #4
 800570c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e041      	b.n	80057b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fc fdbe 	bl	80022c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f000 fbb2 	bl	8005ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e04e      	b.n	8005872 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a23      	ldr	r2, [pc, #140]	; (8005880 <HAL_TIM_Base_Start_IT+0xc4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d022      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x80>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fe:	d01d      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x80>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_TIM_Base_Start_IT+0xc8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d018      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x80>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1e      	ldr	r2, [pc, #120]	; (8005888 <HAL_TIM_Base_Start_IT+0xcc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x80>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_TIM_Base_Start_IT+0xd0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x80>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <HAL_TIM_Base_Start_IT+0xd4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x80>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a19      	ldr	r2, [pc, #100]	; (8005894 <HAL_TIM_Base_Start_IT+0xd8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x80>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <HAL_TIM_Base_Start_IT+0xdc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d111      	bne.n	8005860 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b06      	cmp	r3, #6
 800584c:	d010      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	e007      	b.n	8005870 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40010000 	.word	0x40010000
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40010400 	.word	0x40010400
 8005894:	40014000 	.word	0x40014000
 8005898:	40001800 	.word	0x40001800

0800589c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e041      	b.n	8005932 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f839 	bl	800593a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f000 faf2 	bl	8005ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b02      	cmp	r3, #2
 8005962:	d122      	bne.n	80059aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d11b      	bne.n	80059aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0202 	mvn.w	r2, #2
 800597a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa78 	bl	8005e86 <HAL_TIM_IC_CaptureCallback>
 8005996:	e005      	b.n	80059a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa6a 	bl	8005e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa7b 	bl	8005e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d122      	bne.n	80059fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d11b      	bne.n	80059fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f06f 0204 	mvn.w	r2, #4
 80059ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa4e 	bl	8005e86 <HAL_TIM_IC_CaptureCallback>
 80059ea:	e005      	b.n	80059f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fa40 	bl	8005e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa51 	bl	8005e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d122      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d11b      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0208 	mvn.w	r2, #8
 8005a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2204      	movs	r2, #4
 8005a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fa24 	bl	8005e86 <HAL_TIM_IC_CaptureCallback>
 8005a3e:	e005      	b.n	8005a4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa16 	bl	8005e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa27 	bl	8005e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d122      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	d11b      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f06f 0210 	mvn.w	r2, #16
 8005a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f9fa 	bl	8005e86 <HAL_TIM_IC_CaptureCallback>
 8005a92:	e005      	b.n	8005aa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f9ec 	bl	8005e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9fd 	bl	8005e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d10e      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d107      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f06f 0201 	mvn.w	r2, #1
 8005aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fb fe0b 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005adc:	2b80      	cmp	r3, #128	; 0x80
 8005ade:	d10e      	bne.n	8005afe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d107      	bne.n	8005afe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fd53 	bl	80065a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d10e      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d107      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f9c2 	bl	8005eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d10e      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0220 	mvn.w	r2, #32
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fd1d 	bl	8006590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e0ae      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	f200 809f 	bhi.w	8005ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bc9 	.word	0x08005bc9
 8005b98:	08005ccd 	.word	0x08005ccd
 8005b9c:	08005ccd 	.word	0x08005ccd
 8005ba0:	08005ccd 	.word	0x08005ccd
 8005ba4:	08005c09 	.word	0x08005c09
 8005ba8:	08005ccd 	.word	0x08005ccd
 8005bac:	08005ccd 	.word	0x08005ccd
 8005bb0:	08005ccd 	.word	0x08005ccd
 8005bb4:	08005c4b 	.word	0x08005c4b
 8005bb8:	08005ccd 	.word	0x08005ccd
 8005bbc:	08005ccd 	.word	0x08005ccd
 8005bc0:	08005ccd 	.word	0x08005ccd
 8005bc4:	08005c8b 	.word	0x08005c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fa18 	bl	8006004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	619a      	str	r2, [r3, #24]
      break;
 8005c06:	e064      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fa68 	bl	80060e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	619a      	str	r2, [r3, #24]
      break;
 8005c48:	e043      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fabd 	bl	80061d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0208 	orr.w	r2, r2, #8
 8005c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0204 	bic.w	r2, r2, #4
 8005c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	61da      	str	r2, [r3, #28]
      break;
 8005c88:	e023      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fb11 	bl	80062b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	021a      	lsls	r2, r3, #8
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	61da      	str	r2, [r3, #28]
      break;
 8005cca:	e002      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIM_ConfigClockSource+0x1c>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e0b4      	b.n	8005e6a <HAL_TIM_ConfigClockSource+0x186>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d38:	d03e      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0xd4>
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3e:	f200 8087 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d46:	f000 8086 	beq.w	8005e56 <HAL_TIM_ConfigClockSource+0x172>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4e:	d87f      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b70      	cmp	r3, #112	; 0x70
 8005d52:	d01a      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0xa6>
 8005d54:	2b70      	cmp	r3, #112	; 0x70
 8005d56:	d87b      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b60      	cmp	r3, #96	; 0x60
 8005d5a:	d050      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x11a>
 8005d5c:	2b60      	cmp	r3, #96	; 0x60
 8005d5e:	d877      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b50      	cmp	r3, #80	; 0x50
 8005d62:	d03c      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0xfa>
 8005d64:	2b50      	cmp	r3, #80	; 0x50
 8005d66:	d873      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d058      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x13a>
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d86f      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b30      	cmp	r3, #48	; 0x30
 8005d72:	d064      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d74:	2b30      	cmp	r3, #48	; 0x30
 8005d76:	d86b      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d060      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d867      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d05c      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d05a      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d88:	e062      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6899      	ldr	r1, [r3, #8]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f000 fb5d 	bl	8006458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	609a      	str	r2, [r3, #8]
      break;
 8005db6:	e04f      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	6899      	ldr	r1, [r3, #8]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f000 fb46 	bl	8006458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dda:	609a      	str	r2, [r3, #8]
      break;
 8005ddc:	e03c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 faba 	bl	8006364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2150      	movs	r1, #80	; 0x50
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fb13 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e02c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6859      	ldr	r1, [r3, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f000 fad9 	bl	80063c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2160      	movs	r1, #96	; 0x60
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fb03 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005e1c:	e01c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6859      	ldr	r1, [r3, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f000 fa9a 	bl	8006364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2140      	movs	r1, #64	; 0x40
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 faf3 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005e3c:	e00c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f000 faea 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005e4e:	e003      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	e000      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a40      	ldr	r2, [pc, #256]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d00f      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3d      	ldr	r2, [pc, #244]	; (8005fdc <TIM_Base_SetConfig+0x118>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3c      	ldr	r2, [pc, #240]	; (8005fe0 <TIM_Base_SetConfig+0x11c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3b      	ldr	r2, [pc, #236]	; (8005fe4 <TIM_Base_SetConfig+0x120>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3a      	ldr	r2, [pc, #232]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d108      	bne.n	8005f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d02b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d027      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2c      	ldr	r2, [pc, #176]	; (8005fdc <TIM_Base_SetConfig+0x118>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d023      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2b      	ldr	r2, [pc, #172]	; (8005fe0 <TIM_Base_SetConfig+0x11c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01f      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <TIM_Base_SetConfig+0x120>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a29      	ldr	r2, [pc, #164]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d017      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <TIM_Base_SetConfig+0x128>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <TIM_Base_SetConfig+0x12c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00f      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <TIM_Base_SetConfig+0x130>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <TIM_Base_SetConfig+0x134>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <TIM_Base_SetConfig+0x138>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a23      	ldr	r2, [pc, #140]	; (8006000 <TIM_Base_SetConfig+0x13c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d108      	bne.n	8005f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_Base_SetConfig+0xf8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d103      	bne.n	8005fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	615a      	str	r2, [r3, #20]
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	40001800 	.word	0x40001800
 8005ffc:	40001c00 	.word	0x40001c00
 8006000:	40002000 	.word	0x40002000

08006004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 0302 	bic.w	r3, r3, #2
 800604c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a20      	ldr	r2, [pc, #128]	; (80060dc <TIM_OC1_SetConfig+0xd8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_OC1_SetConfig+0x64>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a1f      	ldr	r2, [pc, #124]	; (80060e0 <TIM_OC1_SetConfig+0xdc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d10c      	bne.n	8006082 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 0308 	bic.w	r3, r3, #8
 800606e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 0304 	bic.w	r3, r3, #4
 8006080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a15      	ldr	r2, [pc, #84]	; (80060dc <TIM_OC1_SetConfig+0xd8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC1_SetConfig+0x8e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a14      	ldr	r2, [pc, #80]	; (80060e0 <TIM_OC1_SetConfig+0xdc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d111      	bne.n	80060b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40010400 	.word	0x40010400

080060e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0210 	bic.w	r2, r3, #16
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0320 	bic.w	r3, r3, #32
 800612e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <TIM_OC2_SetConfig+0xe4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC2_SetConfig+0x68>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a21      	ldr	r2, [pc, #132]	; (80061cc <TIM_OC2_SetConfig+0xe8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10d      	bne.n	8006168 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a17      	ldr	r2, [pc, #92]	; (80061c8 <TIM_OC2_SetConfig+0xe4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC2_SetConfig+0x94>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a16      	ldr	r2, [pc, #88]	; (80061cc <TIM_OC2_SetConfig+0xe8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d113      	bne.n	80061a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800617e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40010400 	.word	0x40010400

080061d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <TIM_OC3_SetConfig+0xe0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC3_SetConfig+0x66>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <TIM_OC3_SetConfig+0xe4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10d      	bne.n	8006252 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800623c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <TIM_OC3_SetConfig+0xe0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_OC3_SetConfig+0x92>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <TIM_OC3_SetConfig+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d113      	bne.n	800628a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40010000 	.word	0x40010000
 80062b4:	40010400 	.word	0x40010400

080062b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	031b      	lsls	r3, r3, #12
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a12      	ldr	r2, [pc, #72]	; (800635c <TIM_OC4_SetConfig+0xa4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_OC4_SetConfig+0x68>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a11      	ldr	r2, [pc, #68]	; (8006360 <TIM_OC4_SetConfig+0xa8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d109      	bne.n	8006334 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	019b      	lsls	r3, r3, #6
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	621a      	str	r2, [r3, #32]
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40010000 	.word	0x40010000
 8006360:	40010400 	.word	0x40010400

08006364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800638e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 030a 	bic.w	r3, r3, #10
 80063a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b087      	sub	sp, #28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0210 	bic.w	r2, r3, #16
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006422:	b480      	push	{r7}
 8006424:	b085      	sub	sp, #20
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	f043 0307 	orr.w	r3, r3, #7
 8006444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	021a      	lsls	r2, r3, #8
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	431a      	orrs	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4313      	orrs	r3, r2
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	609a      	str	r2, [r3, #8]
}
 800648c:	bf00      	nop
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e05a      	b.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a21      	ldr	r2, [pc, #132]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d022      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fc:	d01d      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d018      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1b      	ldr	r2, [pc, #108]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00e      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a18      	ldr	r2, [pc, #96]	; (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d009      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a15      	ldr	r2, [pc, #84]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10c      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40010400 	.word	0x40010400
 8006588:	40014000 	.word	0x40014000
 800658c:	40001800 	.word	0x40001800

08006590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e03f      	b.n	800664a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fb ff4a 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2224      	movs	r2, #36	; 0x24
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fddf 	bl	80071c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b08a      	sub	sp, #40	; 0x28
 8006656:	af02      	add	r7, sp, #8
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b20      	cmp	r3, #32
 8006670:	d17c      	bne.n	800676c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_UART_Transmit+0x2c>
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e075      	b.n	800676e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_UART_Transmit+0x3e>
 800668c:	2302      	movs	r3, #2
 800668e:	e06e      	b.n	800676e <HAL_UART_Transmit+0x11c>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2221      	movs	r2, #33	; 0x21
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066a6:	f7fb fff7 	bl	8002698 <HAL_GetTick>
 80066aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c0:	d108      	bne.n	80066d4 <HAL_UART_Transmit+0x82>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e003      	b.n	80066dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066e4:	e02a      	b.n	800673c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2200      	movs	r2, #0
 80066ee:	2180      	movs	r1, #128	; 0x80
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fb1f 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e036      	b.n	800676e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10b      	bne.n	800671e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	3302      	adds	r3, #2
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	e007      	b.n	800672e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	781a      	ldrb	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	3301      	adds	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1cf      	bne.n	80066e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	2140      	movs	r1, #64	; 0x40
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 faef 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e006      	b.n	800676e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e000      	b.n	800676e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800676c:	2302      	movs	r3, #2
  }
}
 800676e:	4618      	mov	r0, r3
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	4613      	mov	r3, r2
 8006782:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b20      	cmp	r3, #32
 800678e:	d11d      	bne.n	80067cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <HAL_UART_Receive_IT+0x26>
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e016      	b.n	80067ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_UART_Receive_IT+0x38>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e00f      	b.n	80067ce <HAL_UART_Receive_IT+0x58>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	461a      	mov	r2, r3
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fb24 	bl	8006e10 <UART_Start_Receive_IT>
 80067c8:	4603      	mov	r3, r0
 80067ca:	e000      	b.n	80067ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067cc:	2302      	movs	r3, #2
  }
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b0ba      	sub	sp, #232	; 0xe8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067fe:	2300      	movs	r3, #0
 8006800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10f      	bne.n	800683e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <HAL_UART_IRQHandler+0x66>
 800682a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fc07 	bl	800704a <UART_Receive_IT>
      return;
 800683c:	e256      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800683e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80de 	beq.w	8006a04 <HAL_UART_IRQHandler+0x22c>
 8006848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80d1 	beq.w	8006a04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <HAL_UART_IRQHandler+0xae>
 800686e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <HAL_UART_IRQHandler+0xd2>
 8006892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f043 0202 	orr.w	r2, r3, #2
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_UART_IRQHandler+0xf6>
 80068b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0204 	orr.w	r2, r3, #4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d011      	beq.n	80068fe <HAL_UART_IRQHandler+0x126>
 80068da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d105      	bne.n	80068f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f043 0208 	orr.w	r2, r3, #8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 81ed 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <HAL_UART_IRQHandler+0x14e>
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb92 	bl	800704a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b40      	cmp	r3, #64	; 0x40
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <HAL_UART_IRQHandler+0x17a>
 800694a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04f      	beq.n	80069f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fa9a 	bl	8006e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d141      	bne.n	80069ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3314      	adds	r3, #20
 800696c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800697c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3314      	adds	r3, #20
 800698e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800699e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1d9      	bne.n	8006966 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d013      	beq.n	80069e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	4a7d      	ldr	r2, [pc, #500]	; (8006bb4 <HAL_UART_IRQHandler+0x3dc>)
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fc fbf3 	bl	80031b2 <HAL_DMA_Abort_IT>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	e00e      	b.n	8006a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f990 	bl	8006d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	e00a      	b.n	8006a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f98c 	bl	8006d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e006      	b.n	8006a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f988 	bl	8006d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069fe:	e170      	b.n	8006ce2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a00:	bf00      	nop
    return;
 8006a02:	e16e      	b.n	8006ce2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	f040 814a 	bne.w	8006ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8143 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 813c 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	f040 80b4 	bne.w	8006bb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8140 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f080 8139 	bcs.w	8006ce6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a86:	f000 8088 	beq.w	8006b9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1d9      	bne.n	8006a8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3314      	adds	r3, #20
 8006af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006afa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006afe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e1      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3314      	adds	r3, #20
 8006b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e3      	bne.n	8006b12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e3      	bne.n	8006b58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fc fa9c 	bl	80030d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8b6 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bb0:	e099      	b.n	8006ce6 <HAL_UART_IRQHandler+0x50e>
 8006bb2:	bf00      	nop
 8006bb4:	08006f53 	.word	0x08006f53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 808b 	beq.w	8006cea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8086 	beq.w	8006cea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c02:	647a      	str	r2, [r7, #68]	; 0x44
 8006c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e3      	bne.n	8006bde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	623b      	str	r3, [r7, #32]
   return(result);
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e3      	bne.n	8006c16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c80:	61fa      	str	r2, [r7, #28]
 8006c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	69b9      	ldr	r1, [r7, #24]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e3      	bne.n	8006c5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f83e 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca0:	e023      	b.n	8006cea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x4ea>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f95d 	bl	8006f7a <UART_Transmit_IT>
    return;
 8006cc0:	e014      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00e      	beq.n	8006cec <HAL_UART_IRQHandler+0x514>
 8006cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d008      	beq.n	8006cec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f99d 	bl	800701a <UART_EndTransmit_IT>
    return;
 8006ce0:	e004      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
    return;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
      return;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
      return;
 8006cea:	bf00      	nop
  }
}
 8006cec:	37e8      	adds	r7, #232	; 0xe8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop

08006cf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b090      	sub	sp, #64	; 0x40
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d44:	e050      	b.n	8006de8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d04c      	beq.n	8006de8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d54:	f7fb fca0 	bl	8002698 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d241      	bcs.n	8006de8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d84:	637a      	str	r2, [r7, #52]	; 0x34
 8006d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3314      	adds	r3, #20
 8006d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	613b      	str	r3, [r7, #16]
   return(result);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3314      	adds	r3, #20
 8006db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db8:	623a      	str	r2, [r7, #32]
 8006dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e00f      	b.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4013      	ands	r3, r2
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d09f      	beq.n	8006d46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3740      	adds	r7, #64	; 0x40
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	88fa      	ldrh	r2, [r7, #6]
 8006e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2222      	movs	r2, #34	; 0x22
 8006e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695a      	ldr	r2, [r3, #20]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0220 	orr.w	r2, r2, #32
 8006e7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b095      	sub	sp, #84	; 0x54
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb4:	643a      	str	r2, [r7, #64]	; 0x40
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e5      	bne.n	8006e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3314      	adds	r3, #20
 8006ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e5      	bne.n	8006ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d119      	bne.n	8006f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f023 0310 	bic.w	r3, r3, #16
 8006f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f24:	61ba      	str	r2, [r7, #24]
 8006f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6979      	ldr	r1, [r7, #20]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	613b      	str	r3, [r7, #16]
   return(result);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f46:	bf00      	nop
 8006f48:	3754      	adds	r7, #84	; 0x54
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fecb 	bl	8006d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b21      	cmp	r3, #33	; 0x21
 8006f8c:	d13e      	bne.n	800700c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f96:	d114      	bne.n	8006fc2 <UART_Transmit_IT+0x48>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d110      	bne.n	8006fc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	1c9a      	adds	r2, r3, #2
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]
 8006fc0:	e008      	b.n	8006fd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6211      	str	r1, [r2, #32]
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10f      	bne.n	8007008 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007006:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
  }
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007030:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fe5a 	bl	8006cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b08c      	sub	sp, #48	; 0x30
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b22      	cmp	r3, #34	; 0x22
 800705c:	f040 80ab 	bne.w	80071b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007068:	d117      	bne.n	800709a <UART_Receive_IT+0x50>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d113      	bne.n	800709a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007088:	b29a      	uxth	r2, r3
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	629a      	str	r2, [r3, #40]	; 0x28
 8007098:	e026      	b.n	80070e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ac:	d007      	beq.n	80070be <UART_Receive_IT+0x74>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <UART_Receive_IT+0x82>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e008      	b.n	80070de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4619      	mov	r1, r3
 80070f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d15a      	bne.n	80071b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0220 	bic.w	r2, r2, #32
 800710a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800711a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	2b01      	cmp	r3, #1
 800713a:	d135      	bne.n	80071a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	613b      	str	r3, [r7, #16]
   return(result);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f023 0310 	bic.w	r3, r3, #16
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	330c      	adds	r3, #12
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	623a      	str	r2, [r7, #32]
 8007164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	69f9      	ldr	r1, [r7, #28]
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e5      	bne.n	8007142 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b10      	cmp	r3, #16
 8007182:	d10a      	bne.n	800719a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fdbb 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
 80071a6:	e002      	b.n	80071ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fa fc0d 	bl	80019c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e002      	b.n	80071b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e000      	b.n	80071b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
  }
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3730      	adds	r7, #48	; 0x30
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c4:	b0c0      	sub	sp, #256	; 0x100
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	68d9      	ldr	r1, [r3, #12]
 80071de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	ea40 0301 	orr.w	r3, r0, r1
 80071e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	431a      	orrs	r2, r3
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007218:	f021 010c 	bic.w	r1, r1, #12
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007226:	430b      	orrs	r3, r1
 8007228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723a:	6999      	ldr	r1, [r3, #24]
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	ea40 0301 	orr.w	r3, r0, r1
 8007246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b8f      	ldr	r3, [pc, #572]	; (800748c <UART_SetConfig+0x2cc>)
 8007250:	429a      	cmp	r2, r3
 8007252:	d005      	beq.n	8007260 <UART_SetConfig+0xa0>
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b8d      	ldr	r3, [pc, #564]	; (8007490 <UART_SetConfig+0x2d0>)
 800725c:	429a      	cmp	r2, r3
 800725e:	d104      	bne.n	800726a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007260:	f7fd ff8e 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 8007264:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007268:	e003      	b.n	8007272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800726a:	f7fd ff75 	bl	8005158 <HAL_RCC_GetPCLK1Freq>
 800726e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800727c:	f040 810c 	bne.w	8007498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007284:	2200      	movs	r2, #0
 8007286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800728a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800728e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007292:	4622      	mov	r2, r4
 8007294:	462b      	mov	r3, r5
 8007296:	1891      	adds	r1, r2, r2
 8007298:	65b9      	str	r1, [r7, #88]	; 0x58
 800729a:	415b      	adcs	r3, r3
 800729c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800729e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072a2:	4621      	mov	r1, r4
 80072a4:	eb12 0801 	adds.w	r8, r2, r1
 80072a8:	4629      	mov	r1, r5
 80072aa:	eb43 0901 	adc.w	r9, r3, r1
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072c2:	4690      	mov	r8, r2
 80072c4:	4699      	mov	r9, r3
 80072c6:	4623      	mov	r3, r4
 80072c8:	eb18 0303 	adds.w	r3, r8, r3
 80072cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072d0:	462b      	mov	r3, r5
 80072d2:	eb49 0303 	adc.w	r3, r9, r3
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072ee:	460b      	mov	r3, r1
 80072f0:	18db      	adds	r3, r3, r3
 80072f2:	653b      	str	r3, [r7, #80]	; 0x50
 80072f4:	4613      	mov	r3, r2
 80072f6:	eb42 0303 	adc.w	r3, r2, r3
 80072fa:	657b      	str	r3, [r7, #84]	; 0x54
 80072fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007304:	f7f8 ffcc 	bl	80002a0 <__aeabi_uldivmod>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4b61      	ldr	r3, [pc, #388]	; (8007494 <UART_SetConfig+0x2d4>)
 800730e:	fba3 2302 	umull	r2, r3, r3, r2
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	011c      	lsls	r4, r3, #4
 8007316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800731a:	2200      	movs	r2, #0
 800731c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	1891      	adds	r1, r2, r2
 800732e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007330:	415b      	adcs	r3, r3
 8007332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007338:	4641      	mov	r1, r8
 800733a:	eb12 0a01 	adds.w	sl, r2, r1
 800733e:	4649      	mov	r1, r9
 8007340:	eb43 0b01 	adc.w	fp, r3, r1
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007358:	4692      	mov	sl, r2
 800735a:	469b      	mov	fp, r3
 800735c:	4643      	mov	r3, r8
 800735e:	eb1a 0303 	adds.w	r3, sl, r3
 8007362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007366:	464b      	mov	r3, r9
 8007368:	eb4b 0303 	adc.w	r3, fp, r3
 800736c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800737c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007384:	460b      	mov	r3, r1
 8007386:	18db      	adds	r3, r3, r3
 8007388:	643b      	str	r3, [r7, #64]	; 0x40
 800738a:	4613      	mov	r3, r2
 800738c:	eb42 0303 	adc.w	r3, r2, r3
 8007390:	647b      	str	r3, [r7, #68]	; 0x44
 8007392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800739a:	f7f8 ff81 	bl	80002a0 <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	4b3b      	ldr	r3, [pc, #236]	; (8007494 <UART_SetConfig+0x2d4>)
 80073a6:	fba3 2301 	umull	r2, r3, r3, r1
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	2264      	movs	r2, #100	; 0x64
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	1acb      	subs	r3, r1, r3
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073ba:	4b36      	ldr	r3, [pc, #216]	; (8007494 <UART_SetConfig+0x2d4>)
 80073bc:	fba3 2302 	umull	r2, r3, r3, r2
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073c8:	441c      	add	r4, r3
 80073ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	1891      	adds	r1, r2, r2
 80073e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80073e4:	415b      	adcs	r3, r3
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073ec:	4641      	mov	r1, r8
 80073ee:	1851      	adds	r1, r2, r1
 80073f0:	6339      	str	r1, [r7, #48]	; 0x30
 80073f2:	4649      	mov	r1, r9
 80073f4:	414b      	adcs	r3, r1
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	f04f 0300 	mov.w	r3, #0
 8007400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007404:	4659      	mov	r1, fp
 8007406:	00cb      	lsls	r3, r1, #3
 8007408:	4651      	mov	r1, sl
 800740a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800740e:	4651      	mov	r1, sl
 8007410:	00ca      	lsls	r2, r1, #3
 8007412:	4610      	mov	r0, r2
 8007414:	4619      	mov	r1, r3
 8007416:	4603      	mov	r3, r0
 8007418:	4642      	mov	r2, r8
 800741a:	189b      	adds	r3, r3, r2
 800741c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007420:	464b      	mov	r3, r9
 8007422:	460a      	mov	r2, r1
 8007424:	eb42 0303 	adc.w	r3, r2, r3
 8007428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007438:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800743c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007440:	460b      	mov	r3, r1
 8007442:	18db      	adds	r3, r3, r3
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
 8007446:	4613      	mov	r3, r2
 8007448:	eb42 0303 	adc.w	r3, r2, r3
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800744e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007456:	f7f8 ff23 	bl	80002a0 <__aeabi_uldivmod>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <UART_SetConfig+0x2d4>)
 8007460:	fba3 1302 	umull	r1, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	2164      	movs	r1, #100	; 0x64
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	3332      	adds	r3, #50	; 0x32
 8007472:	4a08      	ldr	r2, [pc, #32]	; (8007494 <UART_SetConfig+0x2d4>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	f003 0207 	and.w	r2, r3, #7
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4422      	add	r2, r4
 8007486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007488:	e105      	b.n	8007696 <UART_SetConfig+0x4d6>
 800748a:	bf00      	nop
 800748c:	40011000 	.word	0x40011000
 8007490:	40011400 	.word	0x40011400
 8007494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074aa:	4642      	mov	r2, r8
 80074ac:	464b      	mov	r3, r9
 80074ae:	1891      	adds	r1, r2, r2
 80074b0:	6239      	str	r1, [r7, #32]
 80074b2:	415b      	adcs	r3, r3
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
 80074b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074ba:	4641      	mov	r1, r8
 80074bc:	1854      	adds	r4, r2, r1
 80074be:	4649      	mov	r1, r9
 80074c0:	eb43 0501 	adc.w	r5, r3, r1
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	00eb      	lsls	r3, r5, #3
 80074ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074d2:	00e2      	lsls	r2, r4, #3
 80074d4:	4614      	mov	r4, r2
 80074d6:	461d      	mov	r5, r3
 80074d8:	4643      	mov	r3, r8
 80074da:	18e3      	adds	r3, r4, r3
 80074dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074e0:	464b      	mov	r3, r9
 80074e2:	eb45 0303 	adc.w	r3, r5, r3
 80074e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007506:	4629      	mov	r1, r5
 8007508:	008b      	lsls	r3, r1, #2
 800750a:	4621      	mov	r1, r4
 800750c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007510:	4621      	mov	r1, r4
 8007512:	008a      	lsls	r2, r1, #2
 8007514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007518:	f7f8 fec2 	bl	80002a0 <__aeabi_uldivmod>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4b60      	ldr	r3, [pc, #384]	; (80076a4 <UART_SetConfig+0x4e4>)
 8007522:	fba3 2302 	umull	r2, r3, r3, r2
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	011c      	lsls	r4, r3, #4
 800752a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800752e:	2200      	movs	r2, #0
 8007530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800753c:	4642      	mov	r2, r8
 800753e:	464b      	mov	r3, r9
 8007540:	1891      	adds	r1, r2, r2
 8007542:	61b9      	str	r1, [r7, #24]
 8007544:	415b      	adcs	r3, r3
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800754c:	4641      	mov	r1, r8
 800754e:	1851      	adds	r1, r2, r1
 8007550:	6139      	str	r1, [r7, #16]
 8007552:	4649      	mov	r1, r9
 8007554:	414b      	adcs	r3, r1
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007564:	4659      	mov	r1, fp
 8007566:	00cb      	lsls	r3, r1, #3
 8007568:	4651      	mov	r1, sl
 800756a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756e:	4651      	mov	r1, sl
 8007570:	00ca      	lsls	r2, r1, #3
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	4603      	mov	r3, r0
 8007578:	4642      	mov	r2, r8
 800757a:	189b      	adds	r3, r3, r2
 800757c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007580:	464b      	mov	r3, r9
 8007582:	460a      	mov	r2, r1
 8007584:	eb42 0303 	adc.w	r3, r2, r3
 8007588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800758c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	67bb      	str	r3, [r7, #120]	; 0x78
 8007596:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075a4:	4649      	mov	r1, r9
 80075a6:	008b      	lsls	r3, r1, #2
 80075a8:	4641      	mov	r1, r8
 80075aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ae:	4641      	mov	r1, r8
 80075b0:	008a      	lsls	r2, r1, #2
 80075b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075b6:	f7f8 fe73 	bl	80002a0 <__aeabi_uldivmod>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <UART_SetConfig+0x4e4>)
 80075c0:	fba3 1302 	umull	r1, r3, r3, r2
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	2164      	movs	r1, #100	; 0x64
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	3332      	adds	r3, #50	; 0x32
 80075d2:	4a34      	ldr	r2, [pc, #208]	; (80076a4 <UART_SetConfig+0x4e4>)
 80075d4:	fba2 2303 	umull	r2, r3, r2, r3
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075de:	441c      	add	r4, r3
 80075e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075e4:	2200      	movs	r2, #0
 80075e6:	673b      	str	r3, [r7, #112]	; 0x70
 80075e8:	677a      	str	r2, [r7, #116]	; 0x74
 80075ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075ee:	4642      	mov	r2, r8
 80075f0:	464b      	mov	r3, r9
 80075f2:	1891      	adds	r1, r2, r2
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	415b      	adcs	r3, r3
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075fe:	4641      	mov	r1, r8
 8007600:	1851      	adds	r1, r2, r1
 8007602:	6039      	str	r1, [r7, #0]
 8007604:	4649      	mov	r1, r9
 8007606:	414b      	adcs	r3, r1
 8007608:	607b      	str	r3, [r7, #4]
 800760a:	f04f 0200 	mov.w	r2, #0
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007616:	4659      	mov	r1, fp
 8007618:	00cb      	lsls	r3, r1, #3
 800761a:	4651      	mov	r1, sl
 800761c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007620:	4651      	mov	r1, sl
 8007622:	00ca      	lsls	r2, r1, #3
 8007624:	4610      	mov	r0, r2
 8007626:	4619      	mov	r1, r3
 8007628:	4603      	mov	r3, r0
 800762a:	4642      	mov	r2, r8
 800762c:	189b      	adds	r3, r3, r2
 800762e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007630:	464b      	mov	r3, r9
 8007632:	460a      	mov	r2, r1
 8007634:	eb42 0303 	adc.w	r3, r2, r3
 8007638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800763a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	663b      	str	r3, [r7, #96]	; 0x60
 8007644:	667a      	str	r2, [r7, #100]	; 0x64
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007652:	4649      	mov	r1, r9
 8007654:	008b      	lsls	r3, r1, #2
 8007656:	4641      	mov	r1, r8
 8007658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800765c:	4641      	mov	r1, r8
 800765e:	008a      	lsls	r2, r1, #2
 8007660:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007664:	f7f8 fe1c 	bl	80002a0 <__aeabi_uldivmod>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <UART_SetConfig+0x4e4>)
 800766e:	fba3 1302 	umull	r1, r3, r3, r2
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	2164      	movs	r1, #100	; 0x64
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	3332      	adds	r3, #50	; 0x32
 8007680:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <UART_SetConfig+0x4e4>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f003 020f 	and.w	r2, r3, #15
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4422      	add	r2, r4
 8007694:	609a      	str	r2, [r3, #8]
}
 8007696:	bf00      	nop
 8007698:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800769c:	46bd      	mov	sp, r7
 800769e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a2:	bf00      	nop
 80076a4:	51eb851f 	.word	0x51eb851f

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	2000000c 	.word	0x2000000c

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f000 fcc2 	bl	8008050 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	08008228 	.word	0x08008228
 80076f0:	08008228 	.word	0x08008228
 80076f4:	08008228 	.word	0x08008228
 80076f8:	0800822c 	.word	0x0800822c

080076fc <memset>:
 80076fc:	4402      	add	r2, r0
 80076fe:	4603      	mov	r3, r0
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	f803 1b01 	strb.w	r1, [r3], #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>

0800770c <sniprintf>:
 800770c:	b40c      	push	{r2, r3}
 800770e:	b530      	push	{r4, r5, lr}
 8007710:	4b17      	ldr	r3, [pc, #92]	; (8007770 <sniprintf+0x64>)
 8007712:	1e0c      	subs	r4, r1, #0
 8007714:	681d      	ldr	r5, [r3, #0]
 8007716:	b09d      	sub	sp, #116	; 0x74
 8007718:	da08      	bge.n	800772c <sniprintf+0x20>
 800771a:	238b      	movs	r3, #139	; 0x8b
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	f04f 30ff 	mov.w	r0, #4294967295
 8007722:	b01d      	add	sp, #116	; 0x74
 8007724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007728:	b002      	add	sp, #8
 800772a:	4770      	bx	lr
 800772c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007730:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007734:	bf14      	ite	ne
 8007736:	f104 33ff 	addne.w	r3, r4, #4294967295
 800773a:	4623      	moveq	r3, r4
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	9307      	str	r3, [sp, #28]
 8007740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007744:	9002      	str	r0, [sp, #8]
 8007746:	9006      	str	r0, [sp, #24]
 8007748:	f8ad 3016 	strh.w	r3, [sp, #22]
 800774c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800774e:	ab21      	add	r3, sp, #132	; 0x84
 8007750:	a902      	add	r1, sp, #8
 8007752:	4628      	mov	r0, r5
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	f000 f889 	bl	800786c <_svfiprintf_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	bfbc      	itt	lt
 800775e:	238b      	movlt	r3, #139	; 0x8b
 8007760:	602b      	strlt	r3, [r5, #0]
 8007762:	2c00      	cmp	r4, #0
 8007764:	d0dd      	beq.n	8007722 <sniprintf+0x16>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e7d9      	b.n	8007722 <sniprintf+0x16>
 800776e:	bf00      	nop
 8007770:	2000000c 	.word	0x2000000c

08007774 <siprintf>:
 8007774:	b40e      	push	{r1, r2, r3}
 8007776:	b500      	push	{lr}
 8007778:	b09c      	sub	sp, #112	; 0x70
 800777a:	ab1d      	add	r3, sp, #116	; 0x74
 800777c:	9002      	str	r0, [sp, #8]
 800777e:	9006      	str	r0, [sp, #24]
 8007780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007784:	4809      	ldr	r0, [pc, #36]	; (80077ac <siprintf+0x38>)
 8007786:	9107      	str	r1, [sp, #28]
 8007788:	9104      	str	r1, [sp, #16]
 800778a:	4909      	ldr	r1, [pc, #36]	; (80077b0 <siprintf+0x3c>)
 800778c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007790:	9105      	str	r1, [sp, #20]
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	a902      	add	r1, sp, #8
 8007798:	f000 f868 	bl	800786c <_svfiprintf_r>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	b01c      	add	sp, #112	; 0x70
 80077a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a8:	b003      	add	sp, #12
 80077aa:	4770      	bx	lr
 80077ac:	2000000c 	.word	0x2000000c
 80077b0:	ffff0208 	.word	0xffff0208

080077b4 <__ssputs_r>:
 80077b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	688e      	ldr	r6, [r1, #8]
 80077ba:	429e      	cmp	r6, r3
 80077bc:	4682      	mov	sl, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	4690      	mov	r8, r2
 80077c2:	461f      	mov	r7, r3
 80077c4:	d838      	bhi.n	8007838 <__ssputs_r+0x84>
 80077c6:	898a      	ldrh	r2, [r1, #12]
 80077c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077cc:	d032      	beq.n	8007834 <__ssputs_r+0x80>
 80077ce:	6825      	ldr	r5, [r4, #0]
 80077d0:	6909      	ldr	r1, [r1, #16]
 80077d2:	eba5 0901 	sub.w	r9, r5, r1
 80077d6:	6965      	ldr	r5, [r4, #20]
 80077d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077e0:	3301      	adds	r3, #1
 80077e2:	444b      	add	r3, r9
 80077e4:	106d      	asrs	r5, r5, #1
 80077e6:	429d      	cmp	r5, r3
 80077e8:	bf38      	it	cc
 80077ea:	461d      	movcc	r5, r3
 80077ec:	0553      	lsls	r3, r2, #21
 80077ee:	d531      	bpl.n	8007854 <__ssputs_r+0xa0>
 80077f0:	4629      	mov	r1, r5
 80077f2:	f000 fb63 	bl	8007ebc <_malloc_r>
 80077f6:	4606      	mov	r6, r0
 80077f8:	b950      	cbnz	r0, 8007810 <__ssputs_r+0x5c>
 80077fa:	230c      	movs	r3, #12
 80077fc:	f8ca 3000 	str.w	r3, [sl]
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007810:	6921      	ldr	r1, [r4, #16]
 8007812:	464a      	mov	r2, r9
 8007814:	f000 fabe 	bl	8007d94 <memcpy>
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	6126      	str	r6, [r4, #16]
 8007826:	6165      	str	r5, [r4, #20]
 8007828:	444e      	add	r6, r9
 800782a:	eba5 0509 	sub.w	r5, r5, r9
 800782e:	6026      	str	r6, [r4, #0]
 8007830:	60a5      	str	r5, [r4, #8]
 8007832:	463e      	mov	r6, r7
 8007834:	42be      	cmp	r6, r7
 8007836:	d900      	bls.n	800783a <__ssputs_r+0x86>
 8007838:	463e      	mov	r6, r7
 800783a:	6820      	ldr	r0, [r4, #0]
 800783c:	4632      	mov	r2, r6
 800783e:	4641      	mov	r1, r8
 8007840:	f000 fab6 	bl	8007db0 <memmove>
 8007844:	68a3      	ldr	r3, [r4, #8]
 8007846:	1b9b      	subs	r3, r3, r6
 8007848:	60a3      	str	r3, [r4, #8]
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	4433      	add	r3, r6
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	2000      	movs	r0, #0
 8007852:	e7db      	b.n	800780c <__ssputs_r+0x58>
 8007854:	462a      	mov	r2, r5
 8007856:	f000 fba5 	bl	8007fa4 <_realloc_r>
 800785a:	4606      	mov	r6, r0
 800785c:	2800      	cmp	r0, #0
 800785e:	d1e1      	bne.n	8007824 <__ssputs_r+0x70>
 8007860:	6921      	ldr	r1, [r4, #16]
 8007862:	4650      	mov	r0, sl
 8007864:	f000 fabe 	bl	8007de4 <_free_r>
 8007868:	e7c7      	b.n	80077fa <__ssputs_r+0x46>
	...

0800786c <_svfiprintf_r>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	4698      	mov	r8, r3
 8007872:	898b      	ldrh	r3, [r1, #12]
 8007874:	061b      	lsls	r3, r3, #24
 8007876:	b09d      	sub	sp, #116	; 0x74
 8007878:	4607      	mov	r7, r0
 800787a:	460d      	mov	r5, r1
 800787c:	4614      	mov	r4, r2
 800787e:	d50e      	bpl.n	800789e <_svfiprintf_r+0x32>
 8007880:	690b      	ldr	r3, [r1, #16]
 8007882:	b963      	cbnz	r3, 800789e <_svfiprintf_r+0x32>
 8007884:	2140      	movs	r1, #64	; 0x40
 8007886:	f000 fb19 	bl	8007ebc <_malloc_r>
 800788a:	6028      	str	r0, [r5, #0]
 800788c:	6128      	str	r0, [r5, #16]
 800788e:	b920      	cbnz	r0, 800789a <_svfiprintf_r+0x2e>
 8007890:	230c      	movs	r3, #12
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	e0d1      	b.n	8007a3e <_svfiprintf_r+0x1d2>
 800789a:	2340      	movs	r3, #64	; 0x40
 800789c:	616b      	str	r3, [r5, #20]
 800789e:	2300      	movs	r3, #0
 80078a0:	9309      	str	r3, [sp, #36]	; 0x24
 80078a2:	2320      	movs	r3, #32
 80078a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ac:	2330      	movs	r3, #48	; 0x30
 80078ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a58 <_svfiprintf_r+0x1ec>
 80078b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078b6:	f04f 0901 	mov.w	r9, #1
 80078ba:	4623      	mov	r3, r4
 80078bc:	469a      	mov	sl, r3
 80078be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c2:	b10a      	cbz	r2, 80078c8 <_svfiprintf_r+0x5c>
 80078c4:	2a25      	cmp	r2, #37	; 0x25
 80078c6:	d1f9      	bne.n	80078bc <_svfiprintf_r+0x50>
 80078c8:	ebba 0b04 	subs.w	fp, sl, r4
 80078cc:	d00b      	beq.n	80078e6 <_svfiprintf_r+0x7a>
 80078ce:	465b      	mov	r3, fp
 80078d0:	4622      	mov	r2, r4
 80078d2:	4629      	mov	r1, r5
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff ff6d 	bl	80077b4 <__ssputs_r>
 80078da:	3001      	adds	r0, #1
 80078dc:	f000 80aa 	beq.w	8007a34 <_svfiprintf_r+0x1c8>
 80078e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e2:	445a      	add	r2, fp
 80078e4:	9209      	str	r2, [sp, #36]	; 0x24
 80078e6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 80a2 	beq.w	8007a34 <_svfiprintf_r+0x1c8>
 80078f0:	2300      	movs	r3, #0
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295
 80078f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078fa:	f10a 0a01 	add.w	sl, sl, #1
 80078fe:	9304      	str	r3, [sp, #16]
 8007900:	9307      	str	r3, [sp, #28]
 8007902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007906:	931a      	str	r3, [sp, #104]	; 0x68
 8007908:	4654      	mov	r4, sl
 800790a:	2205      	movs	r2, #5
 800790c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007910:	4851      	ldr	r0, [pc, #324]	; (8007a58 <_svfiprintf_r+0x1ec>)
 8007912:	f7f8 fc75 	bl	8000200 <memchr>
 8007916:	9a04      	ldr	r2, [sp, #16]
 8007918:	b9d8      	cbnz	r0, 8007952 <_svfiprintf_r+0xe6>
 800791a:	06d0      	lsls	r0, r2, #27
 800791c:	bf44      	itt	mi
 800791e:	2320      	movmi	r3, #32
 8007920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007924:	0711      	lsls	r1, r2, #28
 8007926:	bf44      	itt	mi
 8007928:	232b      	movmi	r3, #43	; 0x2b
 800792a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800792e:	f89a 3000 	ldrb.w	r3, [sl]
 8007932:	2b2a      	cmp	r3, #42	; 0x2a
 8007934:	d015      	beq.n	8007962 <_svfiprintf_r+0xf6>
 8007936:	9a07      	ldr	r2, [sp, #28]
 8007938:	4654      	mov	r4, sl
 800793a:	2000      	movs	r0, #0
 800793c:	f04f 0c0a 	mov.w	ip, #10
 8007940:	4621      	mov	r1, r4
 8007942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007946:	3b30      	subs	r3, #48	; 0x30
 8007948:	2b09      	cmp	r3, #9
 800794a:	d94e      	bls.n	80079ea <_svfiprintf_r+0x17e>
 800794c:	b1b0      	cbz	r0, 800797c <_svfiprintf_r+0x110>
 800794e:	9207      	str	r2, [sp, #28]
 8007950:	e014      	b.n	800797c <_svfiprintf_r+0x110>
 8007952:	eba0 0308 	sub.w	r3, r0, r8
 8007956:	fa09 f303 	lsl.w	r3, r9, r3
 800795a:	4313      	orrs	r3, r2
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	46a2      	mov	sl, r4
 8007960:	e7d2      	b.n	8007908 <_svfiprintf_r+0x9c>
 8007962:	9b03      	ldr	r3, [sp, #12]
 8007964:	1d19      	adds	r1, r3, #4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	9103      	str	r1, [sp, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfbb      	ittet	lt
 800796e:	425b      	neglt	r3, r3
 8007970:	f042 0202 	orrlt.w	r2, r2, #2
 8007974:	9307      	strge	r3, [sp, #28]
 8007976:	9307      	strlt	r3, [sp, #28]
 8007978:	bfb8      	it	lt
 800797a:	9204      	strlt	r2, [sp, #16]
 800797c:	7823      	ldrb	r3, [r4, #0]
 800797e:	2b2e      	cmp	r3, #46	; 0x2e
 8007980:	d10c      	bne.n	800799c <_svfiprintf_r+0x130>
 8007982:	7863      	ldrb	r3, [r4, #1]
 8007984:	2b2a      	cmp	r3, #42	; 0x2a
 8007986:	d135      	bne.n	80079f4 <_svfiprintf_r+0x188>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	1d1a      	adds	r2, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	9203      	str	r2, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfb8      	it	lt
 8007994:	f04f 33ff 	movlt.w	r3, #4294967295
 8007998:	3402      	adds	r4, #2
 800799a:	9305      	str	r3, [sp, #20]
 800799c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a68 <_svfiprintf_r+0x1fc>
 80079a0:	7821      	ldrb	r1, [r4, #0]
 80079a2:	2203      	movs	r2, #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	f7f8 fc2b 	bl	8000200 <memchr>
 80079aa:	b140      	cbz	r0, 80079be <_svfiprintf_r+0x152>
 80079ac:	2340      	movs	r3, #64	; 0x40
 80079ae:	eba0 000a 	sub.w	r0, r0, sl
 80079b2:	fa03 f000 	lsl.w	r0, r3, r0
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	4303      	orrs	r3, r0
 80079ba:	3401      	adds	r4, #1
 80079bc:	9304      	str	r3, [sp, #16]
 80079be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c2:	4826      	ldr	r0, [pc, #152]	; (8007a5c <_svfiprintf_r+0x1f0>)
 80079c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079c8:	2206      	movs	r2, #6
 80079ca:	f7f8 fc19 	bl	8000200 <memchr>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d038      	beq.n	8007a44 <_svfiprintf_r+0x1d8>
 80079d2:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <_svfiprintf_r+0x1f4>)
 80079d4:	bb1b      	cbnz	r3, 8007a1e <_svfiprintf_r+0x1b2>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	3307      	adds	r3, #7
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	3308      	adds	r3, #8
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e4:	4433      	add	r3, r6
 80079e6:	9309      	str	r3, [sp, #36]	; 0x24
 80079e8:	e767      	b.n	80078ba <_svfiprintf_r+0x4e>
 80079ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ee:	460c      	mov	r4, r1
 80079f0:	2001      	movs	r0, #1
 80079f2:	e7a5      	b.n	8007940 <_svfiprintf_r+0xd4>
 80079f4:	2300      	movs	r3, #0
 80079f6:	3401      	adds	r4, #1
 80079f8:	9305      	str	r3, [sp, #20]
 80079fa:	4619      	mov	r1, r3
 80079fc:	f04f 0c0a 	mov.w	ip, #10
 8007a00:	4620      	mov	r0, r4
 8007a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a06:	3a30      	subs	r2, #48	; 0x30
 8007a08:	2a09      	cmp	r2, #9
 8007a0a:	d903      	bls.n	8007a14 <_svfiprintf_r+0x1a8>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0c5      	beq.n	800799c <_svfiprintf_r+0x130>
 8007a10:	9105      	str	r1, [sp, #20]
 8007a12:	e7c3      	b.n	800799c <_svfiprintf_r+0x130>
 8007a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a18:	4604      	mov	r4, r0
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e7f0      	b.n	8007a00 <_svfiprintf_r+0x194>
 8007a1e:	ab03      	add	r3, sp, #12
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	462a      	mov	r2, r5
 8007a24:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <_svfiprintf_r+0x1f8>)
 8007a26:	a904      	add	r1, sp, #16
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f3af 8000 	nop.w
 8007a2e:	1c42      	adds	r2, r0, #1
 8007a30:	4606      	mov	r6, r0
 8007a32:	d1d6      	bne.n	80079e2 <_svfiprintf_r+0x176>
 8007a34:	89ab      	ldrh	r3, [r5, #12]
 8007a36:	065b      	lsls	r3, r3, #25
 8007a38:	f53f af2c 	bmi.w	8007894 <_svfiprintf_r+0x28>
 8007a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a3e:	b01d      	add	sp, #116	; 0x74
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	ab03      	add	r3, sp, #12
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <_svfiprintf_r+0x1f8>)
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f000 f87a 	bl	8007b48 <_printf_i>
 8007a54:	e7eb      	b.n	8007a2e <_svfiprintf_r+0x1c2>
 8007a56:	bf00      	nop
 8007a58:	080081ec 	.word	0x080081ec
 8007a5c:	080081f6 	.word	0x080081f6
 8007a60:	00000000 	.word	0x00000000
 8007a64:	080077b5 	.word	0x080077b5
 8007a68:	080081f2 	.word	0x080081f2

08007a6c <_printf_common>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	4616      	mov	r6, r2
 8007a72:	4699      	mov	r9, r3
 8007a74:	688a      	ldr	r2, [r1, #8]
 8007a76:	690b      	ldr	r3, [r1, #16]
 8007a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	bfb8      	it	lt
 8007a80:	4613      	movlt	r3, r2
 8007a82:	6033      	str	r3, [r6, #0]
 8007a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a88:	4607      	mov	r7, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	b10a      	cbz	r2, 8007a92 <_printf_common+0x26>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	6033      	str	r3, [r6, #0]
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	0699      	lsls	r1, r3, #26
 8007a96:	bf42      	ittt	mi
 8007a98:	6833      	ldrmi	r3, [r6, #0]
 8007a9a:	3302      	addmi	r3, #2
 8007a9c:	6033      	strmi	r3, [r6, #0]
 8007a9e:	6825      	ldr	r5, [r4, #0]
 8007aa0:	f015 0506 	ands.w	r5, r5, #6
 8007aa4:	d106      	bne.n	8007ab4 <_printf_common+0x48>
 8007aa6:	f104 0a19 	add.w	sl, r4, #25
 8007aaa:	68e3      	ldr	r3, [r4, #12]
 8007aac:	6832      	ldr	r2, [r6, #0]
 8007aae:	1a9b      	subs	r3, r3, r2
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	dc26      	bgt.n	8007b02 <_printf_common+0x96>
 8007ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ab8:	1e13      	subs	r3, r2, #0
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	bf18      	it	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	0692      	lsls	r2, r2, #26
 8007ac2:	d42b      	bmi.n	8007b1c <_printf_common+0xb0>
 8007ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c0      	blx	r8
 8007ace:	3001      	adds	r0, #1
 8007ad0:	d01e      	beq.n	8007b10 <_printf_common+0xa4>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	68e5      	ldr	r5, [r4, #12]
 8007ad6:	6832      	ldr	r2, [r6, #0]
 8007ad8:	f003 0306 	and.w	r3, r3, #6
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	bf08      	it	eq
 8007ae0:	1aad      	subeq	r5, r5, r2
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	6922      	ldr	r2, [r4, #16]
 8007ae6:	bf0c      	ite	eq
 8007ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aec:	2500      	movne	r5, #0
 8007aee:	4293      	cmp	r3, r2
 8007af0:	bfc4      	itt	gt
 8007af2:	1a9b      	subgt	r3, r3, r2
 8007af4:	18ed      	addgt	r5, r5, r3
 8007af6:	2600      	movs	r6, #0
 8007af8:	341a      	adds	r4, #26
 8007afa:	42b5      	cmp	r5, r6
 8007afc:	d11a      	bne.n	8007b34 <_printf_common+0xc8>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e008      	b.n	8007b14 <_printf_common+0xa8>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	4649      	mov	r1, r9
 8007b08:	4638      	mov	r0, r7
 8007b0a:	47c0      	blx	r8
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d103      	bne.n	8007b18 <_printf_common+0xac>
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b18:	3501      	adds	r5, #1
 8007b1a:	e7c6      	b.n	8007aaa <_printf_common+0x3e>
 8007b1c:	18e1      	adds	r1, r4, r3
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	2030      	movs	r0, #48	; 0x30
 8007b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b26:	4422      	add	r2, r4
 8007b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b30:	3302      	adds	r3, #2
 8007b32:	e7c7      	b.n	8007ac4 <_printf_common+0x58>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4622      	mov	r2, r4
 8007b38:	4649      	mov	r1, r9
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	47c0      	blx	r8
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d0e6      	beq.n	8007b10 <_printf_common+0xa4>
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7d9      	b.n	8007afa <_printf_common+0x8e>
	...

08007b48 <_printf_i>:
 8007b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	7e0f      	ldrb	r7, [r1, #24]
 8007b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b50:	2f78      	cmp	r7, #120	; 0x78
 8007b52:	4691      	mov	r9, r2
 8007b54:	4680      	mov	r8, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	469a      	mov	sl, r3
 8007b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b5e:	d807      	bhi.n	8007b70 <_printf_i+0x28>
 8007b60:	2f62      	cmp	r7, #98	; 0x62
 8007b62:	d80a      	bhi.n	8007b7a <_printf_i+0x32>
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	f000 80d8 	beq.w	8007d1a <_printf_i+0x1d2>
 8007b6a:	2f58      	cmp	r7, #88	; 0x58
 8007b6c:	f000 80a3 	beq.w	8007cb6 <_printf_i+0x16e>
 8007b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b78:	e03a      	b.n	8007bf0 <_printf_i+0xa8>
 8007b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b7e:	2b15      	cmp	r3, #21
 8007b80:	d8f6      	bhi.n	8007b70 <_printf_i+0x28>
 8007b82:	a101      	add	r1, pc, #4	; (adr r1, 8007b88 <_printf_i+0x40>)
 8007b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b88:	08007be1 	.word	0x08007be1
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007b71 	.word	0x08007b71
 8007b94:	08007b71 	.word	0x08007b71
 8007b98:	08007b71 	.word	0x08007b71
 8007b9c:	08007b71 	.word	0x08007b71
 8007ba0:	08007bf5 	.word	0x08007bf5
 8007ba4:	08007b71 	.word	0x08007b71
 8007ba8:	08007b71 	.word	0x08007b71
 8007bac:	08007b71 	.word	0x08007b71
 8007bb0:	08007b71 	.word	0x08007b71
 8007bb4:	08007d01 	.word	0x08007d01
 8007bb8:	08007c25 	.word	0x08007c25
 8007bbc:	08007ce3 	.word	0x08007ce3
 8007bc0:	08007b71 	.word	0x08007b71
 8007bc4:	08007b71 	.word	0x08007b71
 8007bc8:	08007d23 	.word	0x08007d23
 8007bcc:	08007b71 	.word	0x08007b71
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007b71 	.word	0x08007b71
 8007bd8:	08007b71 	.word	0x08007b71
 8007bdc:	08007ceb 	.word	0x08007ceb
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	602a      	str	r2, [r5, #0]
 8007be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0a3      	b.n	8007d3c <_printf_i+0x1f4>
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	6829      	ldr	r1, [r5, #0]
 8007bf8:	0606      	lsls	r6, r0, #24
 8007bfa:	f101 0304 	add.w	r3, r1, #4
 8007bfe:	d50a      	bpl.n	8007c16 <_printf_i+0xce>
 8007c00:	680e      	ldr	r6, [r1, #0]
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	2e00      	cmp	r6, #0
 8007c06:	da03      	bge.n	8007c10 <_printf_i+0xc8>
 8007c08:	232d      	movs	r3, #45	; 0x2d
 8007c0a:	4276      	negs	r6, r6
 8007c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c10:	485e      	ldr	r0, [pc, #376]	; (8007d8c <_printf_i+0x244>)
 8007c12:	230a      	movs	r3, #10
 8007c14:	e019      	b.n	8007c4a <_printf_i+0x102>
 8007c16:	680e      	ldr	r6, [r1, #0]
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c1e:	bf18      	it	ne
 8007c20:	b236      	sxthne	r6, r6
 8007c22:	e7ef      	b.n	8007c04 <_printf_i+0xbc>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	6029      	str	r1, [r5, #0]
 8007c2c:	0601      	lsls	r1, r0, #24
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0xec>
 8007c30:	681e      	ldr	r6, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <_printf_i+0xf2>
 8007c34:	0646      	lsls	r6, r0, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0xe8>
 8007c38:	881e      	ldrh	r6, [r3, #0]
 8007c3a:	4854      	ldr	r0, [pc, #336]	; (8007d8c <_printf_i+0x244>)
 8007c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c3e:	bf0c      	ite	eq
 8007c40:	2308      	moveq	r3, #8
 8007c42:	230a      	movne	r3, #10
 8007c44:	2100      	movs	r1, #0
 8007c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4a:	6865      	ldr	r5, [r4, #4]
 8007c4c:	60a5      	str	r5, [r4, #8]
 8007c4e:	2d00      	cmp	r5, #0
 8007c50:	bfa2      	ittt	ge
 8007c52:	6821      	ldrge	r1, [r4, #0]
 8007c54:	f021 0104 	bicge.w	r1, r1, #4
 8007c58:	6021      	strge	r1, [r4, #0]
 8007c5a:	b90e      	cbnz	r6, 8007c60 <_printf_i+0x118>
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	d04d      	beq.n	8007cfc <_printf_i+0x1b4>
 8007c60:	4615      	mov	r5, r2
 8007c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c66:	fb03 6711 	mls	r7, r3, r1, r6
 8007c6a:	5dc7      	ldrb	r7, [r0, r7]
 8007c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c70:	4637      	mov	r7, r6
 8007c72:	42bb      	cmp	r3, r7
 8007c74:	460e      	mov	r6, r1
 8007c76:	d9f4      	bls.n	8007c62 <_printf_i+0x11a>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d10b      	bne.n	8007c94 <_printf_i+0x14c>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07de      	lsls	r6, r3, #31
 8007c80:	d508      	bpl.n	8007c94 <_printf_i+0x14c>
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6861      	ldr	r1, [r4, #4]
 8007c86:	4299      	cmp	r1, r3
 8007c88:	bfde      	ittt	le
 8007c8a:	2330      	movle	r3, #48	; 0x30
 8007c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c94:	1b52      	subs	r2, r2, r5
 8007c96:	6122      	str	r2, [r4, #16]
 8007c98:	f8cd a000 	str.w	sl, [sp]
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	aa03      	add	r2, sp, #12
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fee2 	bl	8007a6c <_printf_common>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d14c      	bne.n	8007d46 <_printf_i+0x1fe>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	b004      	add	sp, #16
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	4835      	ldr	r0, [pc, #212]	; (8007d8c <_printf_i+0x244>)
 8007cb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007cbc:	6829      	ldr	r1, [r5, #0]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cc4:	6029      	str	r1, [r5, #0]
 8007cc6:	061d      	lsls	r5, r3, #24
 8007cc8:	d514      	bpl.n	8007cf4 <_printf_i+0x1ac>
 8007cca:	07df      	lsls	r7, r3, #31
 8007ccc:	bf44      	itt	mi
 8007cce:	f043 0320 	orrmi.w	r3, r3, #32
 8007cd2:	6023      	strmi	r3, [r4, #0]
 8007cd4:	b91e      	cbnz	r6, 8007cde <_printf_i+0x196>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f023 0320 	bic.w	r3, r3, #32
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	2310      	movs	r3, #16
 8007ce0:	e7b0      	b.n	8007c44 <_printf_i+0xfc>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	f043 0320 	orr.w	r3, r3, #32
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	2378      	movs	r3, #120	; 0x78
 8007cec:	4828      	ldr	r0, [pc, #160]	; (8007d90 <_printf_i+0x248>)
 8007cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cf2:	e7e3      	b.n	8007cbc <_printf_i+0x174>
 8007cf4:	0659      	lsls	r1, r3, #25
 8007cf6:	bf48      	it	mi
 8007cf8:	b2b6      	uxthmi	r6, r6
 8007cfa:	e7e6      	b.n	8007cca <_printf_i+0x182>
 8007cfc:	4615      	mov	r5, r2
 8007cfe:	e7bb      	b.n	8007c78 <_printf_i+0x130>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	6826      	ldr	r6, [r4, #0]
 8007d04:	6961      	ldr	r1, [r4, #20]
 8007d06:	1d18      	adds	r0, r3, #4
 8007d08:	6028      	str	r0, [r5, #0]
 8007d0a:	0635      	lsls	r5, r6, #24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	d501      	bpl.n	8007d14 <_printf_i+0x1cc>
 8007d10:	6019      	str	r1, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <_printf_i+0x1d2>
 8007d14:	0670      	lsls	r0, r6, #25
 8007d16:	d5fb      	bpl.n	8007d10 <_printf_i+0x1c8>
 8007d18:	8019      	strh	r1, [r3, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	4615      	mov	r5, r2
 8007d20:	e7ba      	b.n	8007c98 <_printf_i+0x150>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	602a      	str	r2, [r5, #0]
 8007d28:	681d      	ldr	r5, [r3, #0]
 8007d2a:	6862      	ldr	r2, [r4, #4]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f7f8 fa66 	bl	8000200 <memchr>
 8007d34:	b108      	cbz	r0, 8007d3a <_printf_i+0x1f2>
 8007d36:	1b40      	subs	r0, r0, r5
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d44:	e7a8      	b.n	8007c98 <_printf_i+0x150>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	462a      	mov	r2, r5
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	47d0      	blx	sl
 8007d50:	3001      	adds	r0, #1
 8007d52:	d0ab      	beq.n	8007cac <_printf_i+0x164>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	079b      	lsls	r3, r3, #30
 8007d58:	d413      	bmi.n	8007d82 <_printf_i+0x23a>
 8007d5a:	68e0      	ldr	r0, [r4, #12]
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	bfb8      	it	lt
 8007d62:	4618      	movlt	r0, r3
 8007d64:	e7a4      	b.n	8007cb0 <_printf_i+0x168>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d09b      	beq.n	8007cac <_printf_i+0x164>
 8007d74:	3501      	adds	r5, #1
 8007d76:	68e3      	ldr	r3, [r4, #12]
 8007d78:	9903      	ldr	r1, [sp, #12]
 8007d7a:	1a5b      	subs	r3, r3, r1
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	dcf2      	bgt.n	8007d66 <_printf_i+0x21e>
 8007d80:	e7eb      	b.n	8007d5a <_printf_i+0x212>
 8007d82:	2500      	movs	r5, #0
 8007d84:	f104 0619 	add.w	r6, r4, #25
 8007d88:	e7f5      	b.n	8007d76 <_printf_i+0x22e>
 8007d8a:	bf00      	nop
 8007d8c:	080081fd 	.word	0x080081fd
 8007d90:	0800820e 	.word	0x0800820e

08007d94 <memcpy>:
 8007d94:	440a      	add	r2, r1
 8007d96:	4291      	cmp	r1, r2
 8007d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d9c:	d100      	bne.n	8007da0 <memcpy+0xc>
 8007d9e:	4770      	bx	lr
 8007da0:	b510      	push	{r4, lr}
 8007da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007daa:	4291      	cmp	r1, r2
 8007dac:	d1f9      	bne.n	8007da2 <memcpy+0xe>
 8007dae:	bd10      	pop	{r4, pc}

08007db0 <memmove>:
 8007db0:	4288      	cmp	r0, r1
 8007db2:	b510      	push	{r4, lr}
 8007db4:	eb01 0402 	add.w	r4, r1, r2
 8007db8:	d902      	bls.n	8007dc0 <memmove+0x10>
 8007dba:	4284      	cmp	r4, r0
 8007dbc:	4623      	mov	r3, r4
 8007dbe:	d807      	bhi.n	8007dd0 <memmove+0x20>
 8007dc0:	1e43      	subs	r3, r0, #1
 8007dc2:	42a1      	cmp	r1, r4
 8007dc4:	d008      	beq.n	8007dd8 <memmove+0x28>
 8007dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dce:	e7f8      	b.n	8007dc2 <memmove+0x12>
 8007dd0:	4402      	add	r2, r0
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	428a      	cmp	r2, r1
 8007dd6:	d100      	bne.n	8007dda <memmove+0x2a>
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007de2:	e7f7      	b.n	8007dd4 <memmove+0x24>

08007de4 <_free_r>:
 8007de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007de6:	2900      	cmp	r1, #0
 8007de8:	d044      	beq.n	8007e74 <_free_r+0x90>
 8007dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dee:	9001      	str	r0, [sp, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f1a1 0404 	sub.w	r4, r1, #4
 8007df6:	bfb8      	it	lt
 8007df8:	18e4      	addlt	r4, r4, r3
 8007dfa:	f000 f913 	bl	8008024 <__malloc_lock>
 8007dfe:	4a1e      	ldr	r2, [pc, #120]	; (8007e78 <_free_r+0x94>)
 8007e00:	9801      	ldr	r0, [sp, #4]
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	b933      	cbnz	r3, 8007e14 <_free_r+0x30>
 8007e06:	6063      	str	r3, [r4, #4]
 8007e08:	6014      	str	r4, [r2, #0]
 8007e0a:	b003      	add	sp, #12
 8007e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e10:	f000 b90e 	b.w	8008030 <__malloc_unlock>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d908      	bls.n	8007e2a <_free_r+0x46>
 8007e18:	6825      	ldr	r5, [r4, #0]
 8007e1a:	1961      	adds	r1, r4, r5
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	bf01      	itttt	eq
 8007e20:	6819      	ldreq	r1, [r3, #0]
 8007e22:	685b      	ldreq	r3, [r3, #4]
 8007e24:	1949      	addeq	r1, r1, r5
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	e7ed      	b.n	8007e06 <_free_r+0x22>
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	b10b      	cbz	r3, 8007e34 <_free_r+0x50>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d9fa      	bls.n	8007e2a <_free_r+0x46>
 8007e34:	6811      	ldr	r1, [r2, #0]
 8007e36:	1855      	adds	r5, r2, r1
 8007e38:	42a5      	cmp	r5, r4
 8007e3a:	d10b      	bne.n	8007e54 <_free_r+0x70>
 8007e3c:	6824      	ldr	r4, [r4, #0]
 8007e3e:	4421      	add	r1, r4
 8007e40:	1854      	adds	r4, r2, r1
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	d1e0      	bne.n	8007e0a <_free_r+0x26>
 8007e48:	681c      	ldr	r4, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	6053      	str	r3, [r2, #4]
 8007e4e:	4421      	add	r1, r4
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	e7da      	b.n	8007e0a <_free_r+0x26>
 8007e54:	d902      	bls.n	8007e5c <_free_r+0x78>
 8007e56:	230c      	movs	r3, #12
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	e7d6      	b.n	8007e0a <_free_r+0x26>
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	1961      	adds	r1, r4, r5
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf04      	itt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	bf04      	itt	eq
 8007e6c:	1949      	addeq	r1, r1, r5
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	6054      	str	r4, [r2, #4]
 8007e72:	e7ca      	b.n	8007e0a <_free_r+0x26>
 8007e74:	b003      	add	sp, #12
 8007e76:	bd30      	pop	{r4, r5, pc}
 8007e78:	20000350 	.word	0x20000350

08007e7c <sbrk_aligned>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	4e0e      	ldr	r6, [pc, #56]	; (8007eb8 <sbrk_aligned+0x3c>)
 8007e80:	460c      	mov	r4, r1
 8007e82:	6831      	ldr	r1, [r6, #0]
 8007e84:	4605      	mov	r5, r0
 8007e86:	b911      	cbnz	r1, 8007e8e <sbrk_aligned+0x12>
 8007e88:	f000 f8bc 	bl	8008004 <_sbrk_r>
 8007e8c:	6030      	str	r0, [r6, #0]
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 f8b7 	bl	8008004 <_sbrk_r>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	d00a      	beq.n	8007eb0 <sbrk_aligned+0x34>
 8007e9a:	1cc4      	adds	r4, r0, #3
 8007e9c:	f024 0403 	bic.w	r4, r4, #3
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d007      	beq.n	8007eb4 <sbrk_aligned+0x38>
 8007ea4:	1a21      	subs	r1, r4, r0
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f000 f8ac 	bl	8008004 <_sbrk_r>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d101      	bne.n	8007eb4 <sbrk_aligned+0x38>
 8007eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	20000354 	.word	0x20000354

08007ebc <_malloc_r>:
 8007ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec0:	1ccd      	adds	r5, r1, #3
 8007ec2:	f025 0503 	bic.w	r5, r5, #3
 8007ec6:	3508      	adds	r5, #8
 8007ec8:	2d0c      	cmp	r5, #12
 8007eca:	bf38      	it	cc
 8007ecc:	250c      	movcc	r5, #12
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	db01      	blt.n	8007ed8 <_malloc_r+0x1c>
 8007ed4:	42a9      	cmp	r1, r5
 8007ed6:	d905      	bls.n	8007ee4 <_malloc_r+0x28>
 8007ed8:	230c      	movs	r3, #12
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	2600      	movs	r6, #0
 8007ede:	4630      	mov	r0, r6
 8007ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee4:	4e2e      	ldr	r6, [pc, #184]	; (8007fa0 <_malloc_r+0xe4>)
 8007ee6:	f000 f89d 	bl	8008024 <__malloc_lock>
 8007eea:	6833      	ldr	r3, [r6, #0]
 8007eec:	461c      	mov	r4, r3
 8007eee:	bb34      	cbnz	r4, 8007f3e <_malloc_r+0x82>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff ffc2 	bl	8007e7c <sbrk_aligned>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	4604      	mov	r4, r0
 8007efc:	d14d      	bne.n	8007f9a <_malloc_r+0xde>
 8007efe:	6834      	ldr	r4, [r6, #0]
 8007f00:	4626      	mov	r6, r4
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	d140      	bne.n	8007f88 <_malloc_r+0xcc>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	eb04 0803 	add.w	r8, r4, r3
 8007f10:	f000 f878 	bl	8008004 <_sbrk_r>
 8007f14:	4580      	cmp	r8, r0
 8007f16:	d13a      	bne.n	8007f8e <_malloc_r+0xd2>
 8007f18:	6821      	ldr	r1, [r4, #0]
 8007f1a:	3503      	adds	r5, #3
 8007f1c:	1a6d      	subs	r5, r5, r1
 8007f1e:	f025 0503 	bic.w	r5, r5, #3
 8007f22:	3508      	adds	r5, #8
 8007f24:	2d0c      	cmp	r5, #12
 8007f26:	bf38      	it	cc
 8007f28:	250c      	movcc	r5, #12
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f7ff ffa5 	bl	8007e7c <sbrk_aligned>
 8007f32:	3001      	adds	r0, #1
 8007f34:	d02b      	beq.n	8007f8e <_malloc_r+0xd2>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	442b      	add	r3, r5
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	e00e      	b.n	8007f5c <_malloc_r+0xa0>
 8007f3e:	6822      	ldr	r2, [r4, #0]
 8007f40:	1b52      	subs	r2, r2, r5
 8007f42:	d41e      	bmi.n	8007f82 <_malloc_r+0xc6>
 8007f44:	2a0b      	cmp	r2, #11
 8007f46:	d916      	bls.n	8007f76 <_malloc_r+0xba>
 8007f48:	1961      	adds	r1, r4, r5
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	6025      	str	r5, [r4, #0]
 8007f4e:	bf18      	it	ne
 8007f50:	6059      	strne	r1, [r3, #4]
 8007f52:	6863      	ldr	r3, [r4, #4]
 8007f54:	bf08      	it	eq
 8007f56:	6031      	streq	r1, [r6, #0]
 8007f58:	5162      	str	r2, [r4, r5]
 8007f5a:	604b      	str	r3, [r1, #4]
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	f104 060b 	add.w	r6, r4, #11
 8007f62:	f000 f865 	bl	8008030 <__malloc_unlock>
 8007f66:	f026 0607 	bic.w	r6, r6, #7
 8007f6a:	1d23      	adds	r3, r4, #4
 8007f6c:	1af2      	subs	r2, r6, r3
 8007f6e:	d0b6      	beq.n	8007ede <_malloc_r+0x22>
 8007f70:	1b9b      	subs	r3, r3, r6
 8007f72:	50a3      	str	r3, [r4, r2]
 8007f74:	e7b3      	b.n	8007ede <_malloc_r+0x22>
 8007f76:	6862      	ldr	r2, [r4, #4]
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	bf0c      	ite	eq
 8007f7c:	6032      	streq	r2, [r6, #0]
 8007f7e:	605a      	strne	r2, [r3, #4]
 8007f80:	e7ec      	b.n	8007f5c <_malloc_r+0xa0>
 8007f82:	4623      	mov	r3, r4
 8007f84:	6864      	ldr	r4, [r4, #4]
 8007f86:	e7b2      	b.n	8007eee <_malloc_r+0x32>
 8007f88:	4634      	mov	r4, r6
 8007f8a:	6876      	ldr	r6, [r6, #4]
 8007f8c:	e7b9      	b.n	8007f02 <_malloc_r+0x46>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	4638      	mov	r0, r7
 8007f94:	f000 f84c 	bl	8008030 <__malloc_unlock>
 8007f98:	e7a1      	b.n	8007ede <_malloc_r+0x22>
 8007f9a:	6025      	str	r5, [r4, #0]
 8007f9c:	e7de      	b.n	8007f5c <_malloc_r+0xa0>
 8007f9e:	bf00      	nop
 8007fa0:	20000350 	.word	0x20000350

08007fa4 <_realloc_r>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4614      	mov	r4, r2
 8007fac:	460e      	mov	r6, r1
 8007fae:	b921      	cbnz	r1, 8007fba <_realloc_r+0x16>
 8007fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	f7ff bf81 	b.w	8007ebc <_malloc_r>
 8007fba:	b92a      	cbnz	r2, 8007fc8 <_realloc_r+0x24>
 8007fbc:	f7ff ff12 	bl	8007de4 <_free_r>
 8007fc0:	4625      	mov	r5, r4
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc8:	f000 f838 	bl	800803c <_malloc_usable_size_r>
 8007fcc:	4284      	cmp	r4, r0
 8007fce:	4607      	mov	r7, r0
 8007fd0:	d802      	bhi.n	8007fd8 <_realloc_r+0x34>
 8007fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fd6:	d812      	bhi.n	8007ffe <_realloc_r+0x5a>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4640      	mov	r0, r8
 8007fdc:	f7ff ff6e 	bl	8007ebc <_malloc_r>
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d0ed      	beq.n	8007fc2 <_realloc_r+0x1e>
 8007fe6:	42bc      	cmp	r4, r7
 8007fe8:	4622      	mov	r2, r4
 8007fea:	4631      	mov	r1, r6
 8007fec:	bf28      	it	cs
 8007fee:	463a      	movcs	r2, r7
 8007ff0:	f7ff fed0 	bl	8007d94 <memcpy>
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	f7ff fef4 	bl	8007de4 <_free_r>
 8007ffc:	e7e1      	b.n	8007fc2 <_realloc_r+0x1e>
 8007ffe:	4635      	mov	r5, r6
 8008000:	e7df      	b.n	8007fc2 <_realloc_r+0x1e>
	...

08008004 <_sbrk_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4d06      	ldr	r5, [pc, #24]	; (8008020 <_sbrk_r+0x1c>)
 8008008:	2300      	movs	r3, #0
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	602b      	str	r3, [r5, #0]
 8008010:	f7f9 fffe 	bl	8002010 <_sbrk>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d102      	bne.n	800801e <_sbrk_r+0x1a>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	b103      	cbz	r3, 800801e <_sbrk_r+0x1a>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd38      	pop	{r3, r4, r5, pc}
 8008020:	20000358 	.word	0x20000358

08008024 <__malloc_lock>:
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <__malloc_lock+0x8>)
 8008026:	f000 b811 	b.w	800804c <__retarget_lock_acquire_recursive>
 800802a:	bf00      	nop
 800802c:	2000035c 	.word	0x2000035c

08008030 <__malloc_unlock>:
 8008030:	4801      	ldr	r0, [pc, #4]	; (8008038 <__malloc_unlock+0x8>)
 8008032:	f000 b80c 	b.w	800804e <__retarget_lock_release_recursive>
 8008036:	bf00      	nop
 8008038:	2000035c 	.word	0x2000035c

0800803c <_malloc_usable_size_r>:
 800803c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008040:	1f18      	subs	r0, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	bfbc      	itt	lt
 8008046:	580b      	ldrlt	r3, [r1, r0]
 8008048:	18c0      	addlt	r0, r0, r3
 800804a:	4770      	bx	lr

0800804c <__retarget_lock_acquire_recursive>:
 800804c:	4770      	bx	lr

0800804e <__retarget_lock_release_recursive>:
 800804e:	4770      	bx	lr

08008050 <_init>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

0800805c <_fini>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr
